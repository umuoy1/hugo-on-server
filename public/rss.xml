<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>秋屿</title>
        <link>https://1aomn.com/</link>
        <description>秋屿的个人博客，记载生活点滴与技术灵感。</description>
        <generator>Hugo 0.66.0 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
            <managingEditor>burningdian@gmail.com (秋屿)</managingEditor>
        
        
            <webMaster>burningdian@gmail.com (秋屿)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
        
        <lastBuildDate>Sun, 22 Mar 2020 00:18:24 +0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss+xml" href="https://1aomn.com/rss.xml" />
        
        
            <item>
                <title>我会写的排序算法总结</title>
                <link>https://1aomn.com/skills/summary-of-sort-algo/</link>
                <guid isPermaLink="true">https://1aomn.com/skills/summary-of-sort-algo/</guid>
                <pubDate>Tue, 17 Mar 2020 01:28:15 +0800</pubDate>
                
                    <author>burningdian@gmail.com (秋屿)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>用C++和Go写，有时间再用Javascript写。就当作是复习。</p>
<p>个人习惯下标从<code>1</code>开始。</p>
<hr>
<h2 id="冒泡排序">冒泡排序</h2>
<p>C++：</p>
]]></description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>Cookie和Session</title>
                <link>https://1aomn.com/skills/cookie-session/</link>
                <guid isPermaLink="true">https://1aomn.com/skills/cookie-session/</guid>
                <pubDate>Sun, 15 Mar 2020 17:42:40 +0800</pubDate>
                
                    <author>burningdian@gmail.com (秋屿)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="cookie">Cookie</h2>
<h3 id="定义">定义</h3>
<p>Cookie，中文名「小甜饼」，是一段用来标识用户身份和附加信息而存储在本地客户端上的字符串。</p>
<h3 id="特点">特点</h3>
<p>Cookie有以下几个特点</p>
<ul>
<li>大小有限制，一般不超过5kb</li>
<li>cookie 是没有结构的，但可以用格式如 &quot;a1=v1;a2=v2;a3=v3&quot;来存储结构化数据</li>
<li>跨域不共享，即浏览器为每个域名存储一个 cookie，</li>
<li>浏览器每次发送 http 请求，都会将请求域的 cookie 发送给服务端。这里的请求域仅指本次请求的域，比如在本站首页向 网易云音乐 发送 http 请求，则会向 网易云云音乐 发送本地存储的 cookie 。</li>
<li>服务端可以修改 cookie 并返回给浏览器。</li>
<li>浏览器可以在限制条件下修改 cookie 并返回给服务端。</li>
<li>cookie 在指定的域名及根域名下都生效。</li>
</ul>
<h3 id="分类">分类</h3>
<p>这里直接引用维基百科的介绍：</p>
<p>Cookie总是保存在客户端中，按在客户端中的存储位置，可分为内存Cookie和硬盘Cookie。</p>
<p>内存Cookie由浏览器维护，保存在内存中，浏览器关闭后就消失了，其存在时间是短暂的。硬盘Cookie保存在硬盘裡，有一个过期时间，除非用户手工清理或到了过期时间，硬盘Cookie不会被删除，其存在时间是长期的。所以，按存在时间，可分为非持久Cookie和持久Cookie</p>
<h3 id="使用">使用</h3>
<p>以下的例子在 Node.js 中演示。</p>
<p>首先是解析 cookie</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">req</span><span class="p">.</span><span class="nx">cookie</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="kr">const</span> <span class="nx">cookieStr</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">cookie</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span>
    <span class="nx">cookieStr</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">element</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">element</span><span class="p">){</span>
            <span class="k">return</span>
        <span class="p">}</span>
        <span class="kr">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;=&#39;</span><span class="p">)</span>
        <span class="kr">const</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="kr">const</span> <span class="nx">val</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        <span class="nx">req</span><span class="p">.</span><span class="nx">cookie</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span><span class="o">=</span><span class="nx">val</span>
    <span class="p">});</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">cookie</span><span class="p">)</span> <span class="c1">//为了方便测试，把cookie打印出来
</span></code></pre></td></tr></table>
</div>
</div><p>在有登录验证的场景中，可以使用 cookie 验证用户是否登录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">if</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">cookie</span><span class="p">.</span><span class="nx">username</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//已登录
</span><span class="c1"></span>        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="c1">//尚未登陆
</span><span class="c1"></span>        <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>服务端设置 cookie</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//假如已经登录成功，设置 cookie 返回给客户端
</span><span class="c1"></span><span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Set-Cookie&#39;</span><span class="p">,</span><span class="sb">`usernamed=</span><span class="si">${</span><span class="nx">userNamed</span><span class="si">}</span><span class="sb">; path=/`</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>刚才提到客户端可以修改 cookie 并返回给服务端，但修改是有限制的，假如客户端能修改 cookie 来绕过登录验证，是很危险的,可以添加 <code>httpOnly</code> 属性来允许 cookie 仅能由服务端修改，这里的修改是指不能对已设置的 cookie 修改和删除，但可以追加。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Set-Cookie&#39;</span><span class="p">,</span><span class="sb">`usernamed=</span><span class="si">${</span><span class="nx">userNamed</span><span class="si">}</span><span class="sb">; path=/; httpOnly`</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>在很多网站的登录页面，都可以看到类似&quot;保存用户名xx天&quot;的选项，实现原理就是修改 cookie 的过期时间，这里设置过期时间为 1day。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">getCookieExpires</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
    <span class="nx">d</span><span class="p">.</span><span class="nx">setTime</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">+</span> <span class="p">(</span><span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">))</span>
    <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">toGMTString</span><span class="p">()</span> <span class="c1">//cookie 中的expires为GMT格式
</span><span class="c1"></span><span class="p">}</span>

<span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Set-Cookie&#39;</span><span class="p">,</span> <span class="sb">`usernamed=</span><span class="si">${</span><span class="nx">userNamed</span><span class="si">}</span><span class="sb">; httpOnly; expires=</span><span class="si">${</span><span class="nx">getCookieExpires</span><span class="p">()</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>

</code></pre></td></tr></table>
</div>
</div><h3 id="缺陷">缺陷</h3>
<p>cookie 通常有以下几个缺陷</p>
<ol>
<li>cookie 在 http 请求中是鸣文传递的，有信息泄露的风险</li>
<li>cookie 的大小有限制，不易存储复杂信息</li>
</ol>
<hr>
<h2 id="session">Session</h2>
<p>session 的本意是会话状态，在 http 中的实现是用来跟踪用户的状态。</p>
<p>由于HTTP协议是无状态的，服务端不知道用户上一次做了什么，所以服务端会在用户初始状态的时候创建特定的 session ，用来标识并跟踪这个用户。</p>
<h3 id="原理">原理</h3>
<ol>
<li>服务端在cookie中找到对应的seesionid。</li>
<li>根据sessionid，从服务端对应的session中获取数据，然后返回。</li>
<li>如果找不到sessionid，服务端创建一个新session，并将session添加到cookie中，写入响应头。</li>
</ol>
<hr>
<h2 id="总结">总结</h2>
<p>Cookie 保存在客户端中，用来存储用户的信息。</p>
<p>Session 保存在服务端中，用来跟踪用户，对用户进行唯一标识，可以通过 cookie 实现。</p>
]]></description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>Web后端开发路线图</title>
                <link>https://1aomn.com/skills/back-end-roadmap/</link>
                <guid isPermaLink="true">https://1aomn.com/skills/back-end-roadmap/</guid>
                <pubDate>Sat, 14 Mar 2020 00:22:49 +0800</pubDate>
                
                    <author>burningdian@gmail.com (秋屿)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p><a href="https://github.com/kamranahmedse/developer-roadmap"> https://github.com/kamranahmedse/developer-roadmap </a></p>
<p><img src="https://i.loli.net/2020/03/14/IVQniKDRw9JMBtc.png" alt="image.png"></p>
]]></description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>将Hugo博客搭建在服务器上，使用webhook实时构建</title>
                <link>https://1aomn.com/skills/builg-a-blog-on-server/</link>
                <guid isPermaLink="true">https://1aomn.com/skills/builg-a-blog-on-server/</guid>
                <pubDate>Tue, 10 Mar 2020 21:55:09 +0800</pubDate>
                
                    <author>burningdian@gmail.com (秋屿)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[]]></description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>Golang入门总结</title>
                <link>https://1aomn.com/skills/golang-start/</link>
                <guid isPermaLink="true">https://1aomn.com/skills/golang-start/</guid>
                <pubDate>Sun, 08 Mar 2020 01:35:09 +0800</pubDate>
                
                    <author>burningdian@gmail.com (秋屿)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="输入输出">输入输出</h2>
<p>Golang 有类似C语言的格式化输入输出，常用占位符如下：</p>
<pre><code>%v		//对应值的默认格式
</code></pre><p>整数：</p>
<pre><code>%d		十进制表示
%b		二进制表示
%o		八进制表示
%x		十六进制表示
</code></pre><p>Golang没有无符号整型的占位符</p>
<p>浮点数：</p>
<pre><code>%f		一般小数
%e		科学计数法
</code></pre><p>字符串：</p>
<pre><code>%s		字符串
</code></pre><p>指针：</p>
<pre><code>%p		十六进制表示，前缀0x
</code></pre><h4 id="print">Print</h4>
<pre><code>func Print(a ...interface{}) (n int, err error)
</code></pre><p>使用其操作数的默认格式进行格式化并写入到标准输出。 当两个连续的操作数均不为字符串时，它们之间就会添加空格。</p>
<h4 id="printf">Printf</h4>
<pre><code>func Printf(format string, a ...interface{}) (n int, err error)
</code></pre><p>根据格式说明符写入到标准输出。</p>
<h4 id="println">Println</h4>
<pre><code>func Println(a ...interface{}) (n int, err error)
</code></pre><p>根据默认格式格式化后写入到标准输出，格式之间添加空格，最后添加换行符。</p>
<h4 id="scan">Scan</h4>
<pre><code>func Scan(a ...interface{}) (n int, err error)
</code></pre><p>Scan 扫描从标准输入中读取的文本，并将连续由空格分隔的值存储为连续的实参。 换行符计为空格。</p>
<h4 id="scanf">Scanf</h4>
<pre><code>func Scanf(format string, a ...interface{}) (n int, err error)
</code></pre><p>扫描从标准输入中读取的文本， 并将连续由空格分隔的值存储为连续的实参 。</p>
<h4 id="scanln">Scanln</h4>
<pre><code>func Scanln(a ...interface{}) (n int, err error)
</code></pre><p>类似Scan，但它在换行符处停止扫描，且最后的条目之后必须为换行符或 EOF。</p>
<h4 id="sprint">Sprint</h4>
<pre><code>func Sprint(a ...interface{}) string
</code></pre><p>使用其操作数的默认格式进行格式化并返回其结果字符串。 当两个连续的操作数均不为字符串时，它们之间就会添加空格。</p>
<h4 id="sprintf">Sprintf</h4>
<pre><code>func Sprintf(format string, a ...interface{}) string
</code></pre><hr>
<h2 id="变量">变量</h2>
<p>Golang中的变量一经定义，必须使用</p>
<p>变量类型：</p>
<h4 id="整数">整数</h4>
<pre><code>(u)int  (u)int8  (u)int16  (u)int32  (u)int64
</code></pre><h4 id="浮点数">浮点数</h4>
<pre><code>float32  float64
</code></pre><h4 id="字符字符串">字符/字符串</h4>
<pre><code>string	byte  rune(每个字符占一个长度)
</code></pre><h4 id="布尔型">布尔型</h4>
<pre><code>bool
</code></pre><h4 id="常量">常量</h4>
<pre><code>const a float32 = 3.14
const (
		A = 1
		B = 2)
</code></pre><p>常量的值必须是编译期间确定的数字、字符串、布尔值</p>
<h4 id="函数变量">函数变量</h4>
<pre><code>func test(a int)int{
	return a*a
}
var f = test
var f2 = func(a int)int{
	return a*a
}//匿名函数
f(3)//9
</code></pre><h4 id="变量声明">变量声明</h4>
<pre><code>var v type
v := value
</code></pre><hr>
<h2 id="字符串">字符串</h2>
<p>一个字符串是一个不可改变的字符序列。 字符串的任何操作会产生一个新字符串并返回。</p>
<p>字符串可以用反引号代替双引号，表示字符串的原生格式。</p>
<pre><code>var s string = `
Line: 1
Line: 2  //这是第二行`

Line: 1
Line: 2  //这是第二行 
</code></pre><p>字符串的底层是一个<code>byte</code>的数组，也可以进行切片操作</p>
<pre><code>s1 := &quot;abcd&quot;
s2 := s1[1:3]//bc
</code></pre><p>可以通过<code>string</code>和<code>rune</code>的类型转换，达到改变字符串的目的</p>
<pre><code>s1 := &quot;abcd&quot;
s2 := []rune(s1)
s2[1]='B'
s1 = string(s2)
fmt.Println(s1)//&quot;aBcd&quot;
</code></pre><p>为何不用<code>[]byte</code>？</p>
<p>考虑到中文字符</p>
<h4 id="常用函数">常用函数</h4>
<pre><code>strings包下
Index(str,s string) int//查询字符串第一次出现的位置
LastIndex(str,s string) int//查询字符串最后一次出现的位置
Replace(str,old string,new string,n) string//替换子串old为new，次数为n,-1代表无限次
Count(str,substr string) int//查询出现次数
Repeat(s string,count int) string//生成新字符串，值为s重复count次
TrimSpace(str string) string//去除首位空格
Trim(str string,cutset string) string//去除首位字符串cutstr
Split(str string,sep string)//以sep分隔开，返回一个string切片
Join(str string,sep string) string//将切片str以sep连接，返回新字符串
</code></pre><p>strconv包提供了布尔型、整型数、浮点数和对应字符串的相互转换。</p>
<pre><code>strconv包下
x, err := strconv.Atoi(&quot;123&quot;)
y, err := strconv.ParseInt(&quot;123&quot;,10,64) //10进制，64位。默认返回int64类型
</code></pre><h2 id="数组">数组</h2>
<p>数组是一个由固定长度的特定类型元素组成的序列，一个数组可以由零个或多个元素组成。</p>
<p>数组是固定的，不同长度的数组是不同类型，数组的长度必须是常量表达式，在编译时确定。</p>
<p>数组定义时，默认被初始化元素类型对应的零值。</p>
<p>数组的长度是...时，表示数组长度根据初始化值的个数来计算。</p>
<pre><code>b := [3]int{1,2,3}
var b [3]int = [...]int{1,2,3}
b := [...]int{1:2,3:4}//指定索引赋值
</code></pre><p>数组是值类型，作为函数的参数时为值传递</p>
<p>两个数组的长度和类型均相同时可以被比较，否则会编译错误。</p>
<h2 id="切片">切片</h2>
<p>切片(slice)是在数组之上的抽象数据类型，数组不够灵活，切片应运而生。</p>
<pre><code>a := []int{1,2,3}
</code></pre><h4 id="创建切片">创建切片</h4>
<p>基于数组创建</p>
<pre><code>a := [5]{1,2,3,4,5}
b := a[1:3]//slice
b == &amp;a[1]
</code></pre><p>新切片和原数组共享内存，当切片被扩容时，会开辟新的地址，并将原切片复制过去。</p>
<p>也可以使用<code>make</code>创建</p>
<pre><code>func make([]T, len, cap) []T
</code></pre><p>T表示被创建的切片的元素类型， 函数 <code>make</code> 接受一个类型、一个长度和一个可选的容量参数。 调用 <code>make</code> 时，内部会分配一个数组，然后返回数组对应的切片。</p>
<pre><code>var s []byte
s = make([]byte,5,5)
</code></pre><p>容量参数被忽略时，默认为<code>len</code></p>
<pre><code>s := make([]byte,5)
len(s) == 5
cap(s) == 5
</code></pre><h4 id="切片的原理">切片的原理</h4>
<p>切片本身不是数组，他表面上是数组片段。它包含了指向数组的指针，片段长度，最大容量(指向的数组长度)。</p>
<p><img src="https://i.loli.net/2020/03/13/GlBdFOgMH8VpsWm.png" alt="image.png"></p>
<p>使用make([]byte,5)创建切片后，s结构如下</p>
<p><img src="https://i.loli.net/2020/03/13/59Gvb1kq82aBZf7.png" alt="image.png"></p>
<h4 id="append-copy">append, copy</h4>
<p>切片可以通过<code>append</code>函数扩容</p>
<pre><code>func append(s []T, x ...T) []T
</code></pre><p><code>append</code>函数将x添加到切片s的尾部，并在必要时增加容量。</p>
<pre><code>s := []int{1,2,3}
q := s
//q==s
append(q,4,5)
//q!=s
</code></pre><p>对达到最大容量的切片扩容时，会创建一个新的更大的切片并将原数据复制过去。</p>
<p>切片可以通过<code>copy()</code>函数拷贝</p>
<pre><code>a := []int{1,2,3,4,5}
b := make([]int,10)
copy(b,a)
</code></pre><p><code>copy</code>为值拷贝，改变原切片的值不会影响新切片</p>
<p>如果<code>copy</code>的目标切片的cap比原切片的len小时，忽略后面的值</p>
<pre><code>a := []int{1,2,3,4,5}
b := make([]int,2)
copy(b,a)
fmt.Println(b)
//[1 2]
</code></pre><h2 id="函数">函数</h2>
<p>在Golang中，函数是一等公民。</p>
<h4 id="函数的声明">函数的声明</h4>
<pre><code>func func_name(args...) (return-type){
	body
}
</code></pre><h4 id="参数传递">参数传递</h4>
<p>Golang中，无论是值传递还是引用传递，传递给函数的都是变量的副本，值传递为值的拷贝，引用传递为地址的拷贝。</p>
<p>其中<code>map , slice, chan, 指针, interface</code>默认为引用传递。</p>
<h4 id="可变参数">可变参数</h4>
<p>args可以是不定长的</p>
<pre><code>func add(arg...)int{
	...
}
</code></pre><p>传入参数保存在<code>arg</code>中，arg是一个slice。使用<code>arg[i]</code>访问参数，<code>len(arg)</code>获取参数个数。</p>
<h4 id="defer">defer</h4>
<p><code>defer</code>关键字表示的语句，会在函数返回时执行，<code>defer</code>语句中的变量，在<code>defer</code>声明时就决定了</p>
<p>多个<code>defer</code>以栈的顺序执行。</p>
<pre><code>func f(){
	i := 3
	refer fmt.Println(i)
	i++
	refer fmt.Println(i)
	return
}
//4
//3
</code></pre><hr>
<h2 id="常用内置函数">常用内置函数</h2>
<h4 id="new">new</h4>
<p><code>new</code>给变量分配内存，并置为零值，然后返回指针</p>
<pre><code>i := new(int)
//(*i)==0
s := new(string)
//(*s)==&quot;&quot;
</code></pre><h4 id="make">make</h4>
<p><code>make</code>用于给引用类型分配内存并初始化，如<code>slice, map, channel</code>。</p>
<pre><code>v := make([]int,10,50)//len=10, cap=50
c := make(chan int,10)
</code></pre><hr>
<h2 id="goroute">goroute</h2>
<h2 id="channel">channel</h2>
<ul>
<li></li>
</ul>
<h2 id="异常处理">异常处理</h2>
<p>panic</p>
<ul>
<li></li>
</ul>
<h2 id="time">time</h2>
<ul>
<li></li>
</ul>
<h2 id="闭包">闭包</h2>
]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://1aomn.com/tags/go/">Go</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>搭建Hugo博客，通过Netlify自动部署</title>
                <link>https://1aomn.com/skills/build-a-blog/</link>
                <guid isPermaLink="true">https://1aomn.com/skills/build-a-blog/</guid>
                <pubDate>Fri, 06 Mar 2020 22:02:46 +0800</pubDate>
                
                    <author>burningdian@gmail.com (秋屿)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<blockquote>
<p>本文章基于Windows10，Hugo_extended_0.66.0，博客发布的流程是本地修改同步到github，netlify检测到push动作后自动发布</p>
</blockquote>
<h2 id="一下载并安装hugo">一、下载并安装Hugo</h2>
<ul>
<li>
<p><a href="https://github.com/gohugoio/hugo/releases">Hugo下载地址</a></p>
<p>本教程选择了<img src="https://i.loli.net/2020/03/07/zT8oSZCOAib1q4J.png" alt="1583507935042.png">安装，该版本增加了对sass的支持 。</p>
<h4 id="第1步安装hugo">第1步：安装Hugo</h4>
<p>下载解压，完成之后，把hugo.exe添加到全局变量<code>Path</code>。<img src="https://i.loli.net/2020/03/07/LPQvA3RNwEGMJhm.png" alt="1583508112162.png">在控制台中验证安装成功。</p>
</li>
<li>
<p>在Github上新建仓库hugo-on-netlify，并在D:\Blog目录下打开Gitbash，输入指令。</p>
<blockquote>
<p>$ git clone  <a href="https://github.com/xxxxx/hugo-on-netlify">https://github.com/xxxxx/hugo-on-netlify</a></p>
<p>$ hugo new site hugo-on-netlify --force</p>
</blockquote>
<p>此时便会在hugo-on-netlify文件夹里生成网站需要的文件，文件结构如下。</p>
<blockquote>
<pre><code>myblog
├── archetypes
│   └── default.md
├── content
├── data
├── layouts
├── static
├── themes
└── config.toml
</code></pre></blockquote>
</li>
</ul>
<h4 id="第2步安装主题meme">第2步：安装主题Meme</h4>
<p>Hugo是没有默认主题的，这里选用主题<a href="https://github.com/reuixiy/hugo-theme-meme">Meme</a>。</p>
<blockquote>
<p>$ git clone  <a href="https://github.com/reuixiy/hugo-theme-meme.git">https://github.com/reuixiy/hugo-theme-meme.git</a> themes/meme</p>
</blockquote>
<p>然后替换 <code>config.toml</code> 为 <a href="https://github.com/reuixiy/hugo-theme-meme/blob/master/config-examples/zh-cn/config.toml">config.toml</a> ，可以在其中进行个性化设置。</p>
<h4 id="第3步测试">第3步：测试</h4>
<p>创建测试页面</p>
<blockquote>
<p>$ hugo new posts/my-first-post.md</p>
<p>$ hugo new about/_index.md</p>
</blockquote>
<p>此时，基本工作已经完成了，使用</p>
<blockquote>
<p>$ hugo server -D</p>
</blockquote>
<p>在浏览器里访问<code>http://localhost:1313/</code>，预览博客效果。</p>
<h2 id="二上传github">二、上传Github</h2>
<p>之前我们已经新建了hugo-on-netlify仓库，下一步把博客上传</p>
<blockquote>
<p>$ git add .  #将所有文件添加到仓库里</p>
<p>$ git commit -m &quot;commit message&quot;</p>
<p>$ git push -u origin master</p>
</blockquote>
<p>以上也是更新文章所需的操作，如果嫌麻烦，可以写一个bat脚本减轻工作量。</p>
<h2 id="三使用netlify发布网站">三、使用Netlify发布网站</h2>
<p>官网<a href="https://www.netlify.com/">Netlify</a>可以直接通过Github登录，非常方便。</p>
<h4 id="第1步配置文件">第1步：配置文件</h4>
<p>首先在网站根目录下添加<code>netlify.toml</code>文件，如官网所示：</p>
<blockquote>
<p>[build]
publish = &quot;public&quot;
command = &quot;hugo --gc --minify&quot;</p>
<p>[context.production.environment]
HUGO_VERSION = &quot;0.66.0&quot;
HUGO_ENV = &quot;production&quot;
HUGO_ENABLEGITINFO = &quot;true&quot;</p>
<p>[context.split1]
command = &quot;hugo --gc --minify --enableGitInfo&quot;</p>
<p>[context.split1.environment]
HUGO_VERSION = &quot;0.66.0&quot;
HUGO_ENV = &quot;production&quot;</p>
<p>[context.deploy-preview]
command = &quot;hugo --gc --minify --buildFuture -b $DEPLOY_PRIME_URL&quot;</p>
<p>[context.deploy-preview.environment]
HUGO_VERSION = &quot;0.66.0&quot;</p>
<p>[context.branch-deploy]
command = &quot;hugo --gc --minify -b $DEPLOY_PRIME_URL&quot;</p>
<p>[context.branch-deploy.environment]
HUGO_VERSION = &quot;0.66.0&quot;</p>
<p>[context.next.environment]
HUGO_ENABLEGITINFO = &quot;true&quot;</p>
</blockquote>
<h4 id="第2步netlify配置">第2步：Netlify配置</h4>
<p>根据官网的指引，连接Github中的blog-on-netlify仓库，然后修改设置。</p>
<p>首先修改<code>Build settings</code>，因为需要Netlify通过hugo构建，故做如下修改</p>
<p><img src="https://i.loli.net/2020/03/07/Cms9vcMBQaoZxfO.png" alt="1583510667070.png"></p>
<p>然后修改</p>
<p><img src="https://i.loli.net/2020/03/07/nEK6tA4o2NzQyGq.png" alt="1583510849748.png"></p>
<p>这里的修改是因为Netlify默认使用的Hugo版本过低，需要手动设置，否则不支持Meme主题。</p>
<h4 id="第3步完成">第3步：完成</h4>
<p>构建完成后，Netlify会自动生成一个二级域名，指向你的博客，至此Hugo博客的搭建就完成了。</p>
<h2 id="四自定义域名">四、自定义域名</h2>
<p>因为之前在腾讯云上搭建过博客，也是在上面注册的.com域名，所以这里以腾讯云的DNS解析操作为例。</p>
<p>操作很简单，首先在Domian management中添加域名<img src="https://i.loli.net/2020/03/07/QN67BfgvWCZuHFE.png" alt="1583511456178.png">然后在腾讯云域名的解析记录里添加两条记录。</p>
<p><img src="https://i.loli.net/2020/03/09/xan3kQCeifIWtvy.png" alt="image.png"></p>
<p>等待10分钟后，就可以通过域名访问自己的网站了。</p>
<p>Netlify推荐使用 SSL/TLS 的域名，白嫖的方法很多，这里就不赘述了。</p>
]]></description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
    </channel>
</rss>
