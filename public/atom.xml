<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">秋屿记</title>
    <subtitle type="html">秋屿的个人博客，记载生活点滴与技术灵感。</subtitle>
    <updated>2022-02-06T02:07:25+08:00</updated>
    <id>https://1aomn.com/</id>
    <link rel="alternate" type="text/html" href="https://1aomn.com/" />
    <link rel="self" type="application/atom+xml" href="https://1aomn.com/atom.xml" />
    <author>
            <name>秋屿</name>
            <uri>https://1aomn.com/</uri>
            
                <email>burningdian@gmail.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.66.0">Hugo</generator>
        <entry>
            <title type="text">JavaScript 正则表达式 test 方法在 V8 中的执行路径</title>
            <link rel="alternate" type="text/html" href="https://1aomn.com/skills/js-regexp-test-exec-path/" />
            <id>https://1aomn.com/skills/js-regexp-test-exec-path/</id>
            <updated>2022-02-06T02:04:04+08:00</updated>
            <published>2022-02-06T01:57:27+08:00</published>
            <author>
                    <name>秋屿</name>
                    <uri>https://1aomn.com</uri>
                    <email>burningdian@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[COMMIT ID:c97337ff5ece3c4838fedebddd762984d90ba6f4 regexp.prototype.test regexp-test.tq // 快速模式 -&gt; transitioning javascript builtin RegExpPrototypeTest -&gt; RegExpPrototypeExecBodyWithoutResultFast =&gt; regexp.tq -&gt; transitioning macro RegExpPrototypeExecBodyWithoutResultFast -&gt; RegExpPrototypeExecBodyWithoutResult -&gt; transitioning macro RegExpPrototypeExecBodyWithoutResult -&gt; RegExpExecInternal =&gt; builtins-regexp-gen.cc -&gt; TNode&lt;HeapObject&gt; RegExpBuiltinsAssembler::RegExpExecInternal -&gt; Runtime::kRegExpExec =&gt; runtime-regexp.cc -&gt; RUNTIME_FUNCTION(Runtime_RegExpExec) -&gt;……]]></summary>
            
                <content type="html"><![CDATA[<p><code>COMMIT ID:</code><a href="https://github.com/v8/v8/commit/c97337ff5ece3c4838fedebddd762984d90ba6f4">c97337ff5ece3c4838fedebddd762984d90ba6f4</a></p>
<h2 id="regexpprototypetest">regexp.prototype.test</h2>
<p><code>regexp-test.tq</code>
// 快速模式</p>
<pre><code>-&gt; transitioning javascript builtin RegExpPrototypeTest -&gt; RegExpPrototypeExecBodyWithoutResultFast
=&gt; regexp.tq
-&gt; transitioning macro RegExpPrototypeExecBodyWithoutResultFast -&gt; RegExpPrototypeExecBodyWithoutResult -&gt; transitioning macro RegExpPrototypeExecBodyWithoutResult -&gt; RegExpExecInternal
=&gt; builtins-regexp-gen.cc
-&gt; TNode&lt;HeapObject&gt; RegExpBuiltinsAssembler::RegExpExecInternal
-&gt; Runtime::kRegExpExec
=&gt; runtime-regexp.cc
-&gt; RUNTIME_FUNCTION(Runtime_RegExpExec) -&gt; RegExpExec
-&gt; MaybeHandle&lt;Object&gt; RegExpExec -&gt; RegExp::Exec
=&gt; regexp.cc
-&gt; MaybeHandle&lt;Object&gt; RegExp::Exec
-&gt; RegExpImpl::IrregexpExec
</code></pre><p>// 慢速模式</p>
<pre><code>-&gt; transitioning javascript builtin RegExpPrototypeTest -&gt; RegExpExec
=&gt; regexp.tq
-&gt; transitioning macro RegExpExec(implicit context: Context) -&gt; RegExpPrototypeExecSlow
=&gt; regexp-exec.tq
-&gt; RegExpPrototypeExecSlow(implicit context: Context) -&gt; RegExpPrototypeExecBodySlow -&gt; RegExpPrototypeExecBody
=&gt; regexp.tq
-&gt; transitioning macro RegExpPrototypeExecBody(implicit context: Context) -&gt; RegExpPrototypeExecBodyWithoutResult -&gt; transitioning macro RegExpPrototypeExecBodyWithoutResult -&gt; RegExpExecInternal
=&gt; builtins-regexp-gen.cc
-&gt; TNode&lt;HeapObject&gt; RegExpBuiltinsAssembler::RegExpExecInternal
-&gt; Runtime::kRegExpExec
=&gt; runtime-regexp.cc
-&gt; RUNTIME_FUNCTION(Runtime_RegExpExec) -&gt; RegExpExec
-&gt; MaybeHandle&lt;Object&gt; RegExpExec -&gt; RegExp::Exec
=&gt; regexp.cc
-&gt; MaybeHandle&lt;Object&gt; RegExp::Exec
-&gt; RegExpImpl::IrregexpExec
</code></pre>]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">DDIA Notes</title>
            <link rel="alternate" type="text/html" href="https://1aomn.com/skills/ddia-notes/" />
            <id>https://1aomn.com/skills/ddia-notes/</id>
            <updated>2021-02-21T20:13:23+08:00</updated>
            <published>2021-02-21T19:04:10+08:00</published>
            <author>
                    <name>秋屿</name>
                    <uri>https://1aomn.com</uri>
                    <email>burningdian@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[第三章 数据存储与检索 数据结构 索引会引入额外的开销，任何类型的索引都会降低写的速度，应……]]></summary>
            
                <content type="html"><![CDATA[<h1 id="第三章-数据存储与检索">第三章 数据存储与检索</h1>
<h2 id="数据结构">数据结构</h2>
<p>索引会引入额外的开销，任何类型的索引都会降低写的速度，应避免引入过多不必要的开销</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://1aomn.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/" term="分布式" label="分布式" />
                            
                        
                            
                            
                            
                                <category scheme="https://1aomn.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/" term="数据库" label="数据库" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Node.js探索——启动与模块加载</title>
            <link rel="alternate" type="text/html" href="https://1aomn.com/skills/explore-nodejs-module-and-bootstrap/" />
            <id>https://1aomn.com/skills/explore-nodejs-module-and-bootstrap/</id>
            <updated>2020-10-19T12:52:44+08:00</updated>
            <published>2020-10-08T20:17:56+08:00</published>
            <author>
                    <name>秋屿</name>
                    <uri>https://1aomn.com</uri>
                    <email>burningdian@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[版本：14.13.1 NOde.js的实际入口是src\node_main.cc，这里……]]></summary>
            
                <content type="html"><![CDATA[<p>版本：14.13.1</p>
<p><code>NOde.js</code>的实际入口是<code>src\node_main.cc</code>，这里以<code>Windows</code>为例。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node_main.cc
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">wmain</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">wchar_t</span><span class="o">*</span> <span class="n">wargv</span><span class="p">[])</span> <span class="p">{</span>
  <span class="c1">// Windows Server 2012 (not R2) is supported until 10/10/2023, so we allow it
</span><span class="c1"></span>  <span class="c1">// to run in the experimental support tier.
</span><span class="c1"></span>  <span class="c1">// ...
</span><span class="c1"></span>  <span class="n">argv</span><span class="p">[</span><span class="n">argc</span><span class="p">]</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">node</span><span class="o">::</span><span class="n">Start</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p><code>Windows</code>下调用<code>wmain</code>类<code>unix</code>下调用<code>main</code>，调用<code>Start</code>启动<code>Node.js</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// src/node.cc
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">Start</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 初始化
</span><span class="c1"></span>  <span class="n">InitializationResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">InitializeOncePerProcess</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
    <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>开始初始化，调用<code>InitializeOncePerProcess</code>。</p>
<p>在<code>V8</code>初始化之前，会执行一步初始化操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node.cc
</span><span class="c1"></span><span class="p">{</span>
    <span class="n">result</span><span class="p">.</span><span class="n">exit_code</span> <span class="o">=</span>
        <span class="n">InitializeNodeWithArgs</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">args</span><span class="p">),</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">exec_args</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">errors</span><span class="p">);</span>
    <span class="c1">// ...
</span><span class="c1"></span>    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>初始化函数<code>InitializeNodeWithArgs</code>主要是调用<code>RegisterBuiltinModules</code>注册内建模块，处理一些<code>Node.js</code>配置及参数相关的内容。</p>
<p>调用<code>RegisterBuiltinModules</code>注册核心模块，其中定义了一个宏，调用<code>NODE_BUILTIN_MODULES(</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node_binding.cc
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">RegisterBuiltinModules</span><span class="p">()</span> <span class="p">{</span>
<span class="cp">#define V(modname) _register_##modname();
</span><span class="cp"></span>  <span class="n">NODE_BUILTIN_MODULES</span><span class="p">(</span><span class="n">V</span><span class="p">)</span>
<span class="cp">#undef V
</span><span class="cp"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>展开</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="cp">#define NODE_BUILTIN_MODULES(V)                                                \
</span><span class="cp">  NODE_BUILTIN_STANDARD_MODULES(V)                                             \
</span><span class="cp">  NODE_BUILTIN_OPENSSL_MODULES(V)                                              \
</span><span class="cp">  NODE_BUILTIN_QUIC_MODULES(V)                                                 \
</span><span class="cp">  NODE_BUILTIN_ICU_MODULES(V)                                                  \
</span><span class="cp">  NODE_BUILTIN_PROFILER_MODULES(V)                                             \
</span><span class="cp">  NODE_BUILTIN_DTRACE_MODULES(V)
</span></code></pre></td></tr></table>
</div>
</div><p>最终展开后如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node_binding.cc
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">RegisterBuiltinModules</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">_register_async_wrap</span><span class="p">();</span>
    <span class="n">_register_block_list</span><span class="p">();</span>
    <span class="c1">// _register_&lt;module name&gt;
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这些单独模块的注册函数定义在每个<code>C++</code>模块文件里，比如<code>async_wrap.cc</code>的结尾。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// async_wrap.cc
</span><span class="c1"></span><span class="n">NODE_MODULE_CONTEXT_AWARE_INTERNAL</span><span class="p">(</span><span class="n">async_wrap</span><span class="p">,</span> <span class="n">node</span><span class="o">::</span><span class="n">AsyncWrap</span><span class="o">::</span><span class="n">Initialize</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>其中<code>NODE_MODULE_CONTEXT_AWARE_INTERNAL</code>定义如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node_binding.cc
</span><span class="c1"></span><span class="cp">#define NODE_MODULE_CONTEXT_AWARE_INTERNAL(modname, regfunc)                   \
</span><span class="cp">  NODE_MODULE_CONTEXT_AWARE_CPP(modname, regfunc, nullptr, NM_F_INTERNAL)
</span></code></pre></td></tr></table>
</div>
</div><p>展开</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node_binding.cc
</span><span class="c1"></span><span class="cp">#define NODE_MODULE_CONTEXT_AWARE_CPP(modname, regfunc, priv, flags)           \
</span><span class="cp">  static node::node_module _module = {                                         \
</span><span class="cp">      NODE_MODULE_VERSION,                                                     \
</span><span class="cp">      flags,                                                                   \
</span><span class="cp">      nullptr,                                                                 \
</span><span class="cp">      __FILE__,                                                                \
</span><span class="cp">      nullptr,                                                                 \
</span><span class="cp">      (node::addon_context_register_func)(regfunc),                            \
</span><span class="cp">      NODE_STRINGIFY(modname),                                                 \
</span><span class="cp">      priv,                                                                    \
</span><span class="cp">      nullptr};                                                                \
</span><span class="cp">  void _register_##modname() { node_module_register(&amp;_module); }
</span></code></pre></td></tr></table>
</div>
</div><p>每个<code>C++</code>模块的结尾，都注册了一个<code>_register_##modname</code>的函数，在注册<code>C++</code>模块时，经过一系列的宏展开，把所有模块的注册函数都执行一遍，其最终执行<code>node_module_register</code>。</p>
<p><code>C++</code>模块的结构以及<code>node_module_register</code>实现如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node.h
</span><span class="c1"></span><span class="k">struct</span> <span class="nc">node_module</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">nm_version</span><span class="p">;</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">nm_flags</span><span class="p">;</span>
  <span class="kt">void</span><span class="o">*</span> <span class="n">nm_dso_handle</span><span class="p">;</span>
  <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">nm_filename</span><span class="p">;</span>
  <span class="n">node</span><span class="o">::</span><span class="n">addon_register_func</span> <span class="n">nm_register_func</span><span class="p">;</span>
  <span class="n">node</span><span class="o">::</span><span class="n">addon_context_register_func</span> <span class="n">nm_context_register_func</span><span class="p">;</span>
  <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">nm_modname</span><span class="p">;</span>
  <span class="kt">void</span><span class="o">*</span> <span class="n">nm_priv</span><span class="p">;</span>
  <span class="k">struct</span> <span class="nc">node_module</span><span class="o">*</span> <span class="n">nm_link</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node_binding.cc
</span><span class="c1"></span><span class="k">extern</span> <span class="s">&#34;C&#34;</span> <span class="kt">void</span> <span class="n">node_module_register</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">m</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">struct</span> <span class="nc">node_module</span><span class="o">*</span> <span class="n">mp</span> <span class="o">=</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="k">struct</span> <span class="nc">node_module</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">mp</span><span class="o">-&gt;</span><span class="n">nm_flags</span> <span class="o">&amp;</span> <span class="n">NM_F_INTERNAL</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">mp</span><span class="o">-&gt;</span><span class="n">nm_link</span> <span class="o">=</span> <span class="n">modlist_internal</span><span class="p">;</span>
    <span class="n">modlist_internal</span> <span class="o">=</span> <span class="n">mp</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="o">!</span><span class="n">node_is_initialized</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// &#34;Linked&#34; modules are included as part of the node project.
</span><span class="c1"></span>    <span class="c1">// Like builtins they are registered *before* node::Init runs.
</span><span class="c1"></span>    <span class="n">mp</span><span class="o">-&gt;</span><span class="n">nm_flags</span> <span class="o">=</span> <span class="n">NM_F_LINKED</span><span class="p">;</span>
    <span class="n">mp</span><span class="o">-&gt;</span><span class="n">nm_link</span> <span class="o">=</span> <span class="n">modlist_linked</span><span class="p">;</span>
    <span class="n">modlist_linked</span> <span class="o">=</span> <span class="n">mp</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">thread_local_modpending</span> <span class="o">=</span> <span class="n">mp</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>多个<code>C++</code>模块组成一个链表，并使用头插法连接。</p>
<p>通过这里可以知道，内建模块是注册到一个链表上，以供后续使用。</p>
<p>内建模块注册完毕以及一系列准备结束后，在函数的结尾，初始化<code>V8</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node.cc
</span><span class="c1"></span><span class="n">per_process</span><span class="o">::</span><span class="n">v8_platform</span><span class="p">.</span><span class="n">Initialize</span><span class="p">(</span>
    <span class="n">per_process</span><span class="o">::</span><span class="n">cli_options</span><span class="o">-&gt;</span><span class="n">v8_thread_pool_size</span><span class="p">);</span>
<span class="n">V8</span><span class="o">::</span><span class="n">Initialize</span><span class="p">();</span>
<span class="n">performance</span><span class="o">::</span><span class="n">performance_v8_start</span> <span class="o">=</span> <span class="n">PERFORMANCE_NOW</span><span class="p">();</span>
<span class="n">per_process</span><span class="o">::</span><span class="n">v8_initialized</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>初始化结束，根据<code>InitializeOncePerProcess(argc, argv)</code>返回的结果(包括初始化的<code>V8</code>)创建<code>NodeMainInstance</code>实例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node.cc
</span><span class="c1"></span><span class="n">Isolate</span><span class="o">::</span><span class="n">CreateParams</span> <span class="n">params</span><span class="p">;</span>
<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">size_t</span><span class="o">&gt;*</span> <span class="n">indexes</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
<span class="k">const</span> <span class="n">EnvSerializeInfo</span><span class="o">*</span> <span class="n">env_info</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
<span class="kt">bool</span> <span class="n">force_no_snapshot</span> <span class="o">=</span>
    <span class="n">per_process</span><span class="o">::</span><span class="n">cli_options</span><span class="o">-&gt;</span><span class="n">per_isolate</span><span class="o">-&gt;</span><span class="n">no_node_snapshot</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">force_no_snapshot</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">v8</span><span class="o">::</span><span class="n">StartupData</span><span class="o">*</span> <span class="n">blob</span> <span class="o">=</span> <span class="n">NodeMainInstance</span><span class="o">::</span><span class="n">GetEmbeddedSnapshotBlob</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">blob</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">params</span><span class="p">.</span><span class="n">snapshot_blob</span> <span class="o">=</span> <span class="n">blob</span><span class="p">;</span>
    <span class="n">indexes</span> <span class="o">=</span> <span class="n">NodeMainInstance</span><span class="o">::</span><span class="n">GetIsolateDataIndexes</span><span class="p">();</span>
    <span class="n">env_info</span> <span class="o">=</span> <span class="n">NodeMainInstance</span><span class="o">::</span><span class="n">GetEnvSerializeInfo</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="n">uv_loop_configure</span><span class="p">(</span><span class="n">uv_default_loop</span><span class="p">(),</span> <span class="n">UV_METRICS_IDLE_TIME</span><span class="p">);</span>
<span class="n">NodeMainInstance</span> <span class="nf">main_instance</span><span class="p">(</span><span class="o">&amp;</span><span class="n">params</span><span class="p">,</span>
                               <span class="n">uv_default_loop</span><span class="p">(),</span>
                               <span class="n">per_process</span><span class="o">::</span><span class="n">v8_platform</span><span class="p">.</span><span class="n">Platform</span><span class="p">(),</span>
                               <span class="n">result</span><span class="p">.</span><span class="n">args</span><span class="p">,</span>
                               <span class="n">result</span><span class="p">.</span><span class="n">exec_args</span><span class="p">,</span>
                               <span class="n">indexes</span><span class="p">);</span>
<span class="n">result</span><span class="p">.</span><span class="n">exit_code</span> <span class="o">=</span> <span class="n">main_instance</span><span class="p">.</span><span class="n">Run</span><span class="p">(</span><span class="n">env_info</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>初始化<code>NodeMainInstance</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">// src/node_main_instance.cc
</span><span class="c1"></span><span class="n">NodeMainInstance</span><span class="o">::</span><span class="n">NodeMainInstance</span><span class="p">(</span>
    <span class="n">Isolate</span><span class="o">::</span><span class="n">CreateParams</span><span class="o">*</span> <span class="n">params</span><span class="p">,</span>
    <span class="n">uv_loop_t</span><span class="o">*</span> <span class="n">event_loop</span><span class="p">,</span>
    <span class="n">MultiIsolatePlatform</span><span class="o">*</span> <span class="n">platform</span><span class="p">,</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">args</span><span class="p">,</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">exec_args</span><span class="p">,</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">size_t</span><span class="o">&gt;*</span> <span class="n">per_isolate_data_indexes</span><span class="p">)</span>
    <span class="o">:</span> <span class="n">args_</span><span class="p">(</span><span class="n">args</span><span class="p">),</span>
      <span class="n">exec_args_</span><span class="p">(</span><span class="n">exec_args</span><span class="p">),</span>
      <span class="n">array_buffer_allocator_</span><span class="p">(</span><span class="n">ArrayBufferAllocator</span><span class="o">::</span><span class="n">Create</span><span class="p">()),</span>
      <span class="n">isolate_</span><span class="p">(</span><span class="k">nullptr</span><span class="p">),</span>
      <span class="n">platform_</span><span class="p">(</span><span class="n">platform</span><span class="p">),</span>
      <span class="n">isolate_data_</span><span class="p">(</span><span class="k">nullptr</span><span class="p">),</span>
      <span class="n">owns_isolate_</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">params</span><span class="o">-&gt;</span><span class="n">array_buffer_allocator</span> <span class="o">=</span> <span class="n">array_buffer_allocator_</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
  <span class="n">deserialize_mode_</span> <span class="o">=</span> <span class="n">per_isolate_data_indexes</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">deserialize_mode_</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">intptr_t</span><span class="o">&gt;&amp;</span> <span class="n">external_references</span> <span class="o">=</span>
        <span class="n">CollectExternalReferences</span><span class="p">();</span>
    <span class="n">params</span><span class="o">-&gt;</span><span class="n">external_references</span> <span class="o">=</span> <span class="n">external_references</span><span class="p">.</span><span class="n">data</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="n">isolate_</span> <span class="o">=</span> <span class="n">Isolate</span><span class="o">::</span><span class="n">Allocate</span><span class="p">();</span>
  <span class="n">CHECK_NOT_NULL</span><span class="p">(</span><span class="n">isolate_</span><span class="p">);</span>
  <span class="c1">// Register the isolate on the platform before the isolate gets initialized,
</span><span class="c1"></span>  <span class="c1">// so that the isolate can access the platform during initialization.
</span><span class="c1"></span>  <span class="n">platform</span><span class="o">-&gt;</span><span class="n">RegisterIsolate</span><span class="p">(</span><span class="n">isolate_</span><span class="p">,</span> <span class="n">event_loop</span><span class="p">);</span>
  <span class="n">SetIsolateCreateParamsForNode</span><span class="p">(</span><span class="n">params</span><span class="p">);</span>
  <span class="n">Isolate</span><span class="o">::</span><span class="n">Initialize</span><span class="p">(</span><span class="n">isolate_</span><span class="p">,</span> <span class="o">*</span><span class="n">params</span><span class="p">);</span>

  <span class="c1">// If the indexes are not nullptr, we are not deserializing
</span><span class="c1"></span>  <span class="n">CHECK_IMPLIES</span><span class="p">(</span><span class="n">deserialize_mode_</span><span class="p">,</span> <span class="n">params</span><span class="o">-&gt;</span><span class="n">external_references</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">);</span>
  <span class="n">isolate_data_</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">IsolateData</span><span class="o">&gt;</span><span class="p">(</span><span class="n">isolate_</span><span class="p">,</span>
                                                <span class="n">event_loop</span><span class="p">,</span>
                                                <span class="n">platform</span><span class="p">,</span>
                                                <span class="n">array_buffer_allocator_</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span>
                                                <span class="n">per_isolate_data_indexes</span><span class="p">);</span>
  <span class="n">IsolateSettings</span> <span class="n">s</span><span class="p">;</span>
  <span class="n">SetIsolateMiscHandlers</span><span class="p">(</span><span class="n">isolate_</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">deserialize_mode_</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// If in deserialize mode, delay until after the deserialization is
</span><span class="c1"></span>    <span class="c1">// complete.
</span><span class="c1"></span>    <span class="n">SetIsolateErrorHandlers</span><span class="p">(</span><span class="n">isolate_</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>可见<code>event loop</code>的创建是在这里完成的，之后它创建并初始化了一个<code>Isolate</code>实例，并在<code>Isolate</code>初始化之前，将<code>event loop</code>和<code>Isolate</code>注册到<code>platform</code>上。</p>
<p>完成一系列初始化之后，调用<code>NodeMainInstance::Run</code>。</p>
<p>这一步至关重要，<code>Environment</code>的创建，<code>V8</code>环境的启动以及<code>event loop</code>的执行都是在这里完成的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">// node_main_instance.cc
</span><span class="c1"></span><span class="kt">int</span> <span class="n">NodeMainInstance</span><span class="o">::</span><span class="n">Run</span><span class="p">(</span><span class="k">const</span> <span class="n">EnvSerializeInfo</span><span class="o">*</span> <span class="n">env_info</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Locker</span> <span class="nf">locker</span><span class="p">(</span><span class="n">isolate_</span><span class="p">);</span>
  <span class="n">Isolate</span><span class="o">::</span><span class="n">Scope</span> <span class="n">isolate_scope</span><span class="p">(</span><span class="n">isolate_</span><span class="p">);</span>
  <span class="n">HandleScope</span> <span class="nf">handle_scope</span><span class="p">(</span><span class="n">isolate_</span><span class="p">);</span>

  <span class="kt">int</span> <span class="n">exit_code</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">DeleteFnPtr</span><span class="o">&lt;</span><span class="n">Environment</span><span class="p">,</span> <span class="n">FreeEnvironment</span><span class="o">&gt;</span> <span class="n">env</span> <span class="o">=</span>
      <span class="n">CreateMainEnvironment</span><span class="p">(</span><span class="o">&amp;</span><span class="n">exit_code</span><span class="p">,</span> <span class="n">env_info</span><span class="p">);</span>

  <span class="n">CHECK_NOT_NULL</span><span class="p">(</span><span class="n">env</span><span class="p">);</span>
  <span class="p">{</span>
    <span class="n">Context</span><span class="o">::</span><span class="n">Scope</span> <span class="n">context_scope</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">());</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">exit_code</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">LoadEnvironment</span><span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="n">get</span><span class="p">());</span>

      <span class="n">env</span><span class="o">-&gt;</span><span class="n">set_trace_sync_io</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">options</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">trace_sync_io</span><span class="p">);</span>

      <span class="p">{</span>
        <span class="n">SealHandleScope</span> <span class="nf">seal</span><span class="p">(</span><span class="n">isolate_</span><span class="p">);</span>
        <span class="kt">bool</span> <span class="n">more</span><span class="p">;</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">performance_state</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Mark</span><span class="p">(</span>
            <span class="n">node</span><span class="o">::</span><span class="n">performance</span><span class="o">::</span><span class="n">NODE_PERFORMANCE_MILESTONE_LOOP_START</span><span class="p">);</span>
        <span class="k">do</span> <span class="p">{</span>
          <span class="n">uv_run</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">event_loop</span><span class="p">(),</span> <span class="n">UV_RUN_DEFAULT</span><span class="p">);</span>

          <span class="n">per_process</span><span class="o">::</span><span class="n">v8_platform</span><span class="p">.</span><span class="n">DrainVMTasks</span><span class="p">(</span><span class="n">isolate_</span><span class="p">);</span>

          <span class="n">more</span> <span class="o">=</span> <span class="n">uv_loop_alive</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">event_loop</span><span class="p">());</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">more</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">is_stopping</span><span class="p">())</span> <span class="k">continue</span><span class="p">;</span>

          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">uv_loop_alive</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">event_loop</span><span class="p">()))</span> <span class="p">{</span>
            <span class="n">EmitBeforeExit</span><span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="n">get</span><span class="p">());</span>
          <span class="p">}</span>

          <span class="c1">// Emit `beforeExit` if the loop became alive either after emitting
</span><span class="c1"></span>          <span class="c1">// event, or after running some callbacks.
</span><span class="c1"></span>          <span class="n">more</span> <span class="o">=</span> <span class="n">uv_loop_alive</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">event_loop</span><span class="p">());</span>
        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">more</span> <span class="o">==</span> <span class="nb">true</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">is_stopping</span><span class="p">());</span>
        <span class="n">env</span><span class="o">-&gt;</span><span class="n">performance_state</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Mark</span><span class="p">(</span>
            <span class="n">node</span><span class="o">::</span><span class="n">performance</span><span class="o">::</span><span class="n">NODE_PERFORMANCE_MILESTONE_LOOP_EXIT</span><span class="p">);</span>
      <span class="p">}</span>

      <span class="n">env</span><span class="o">-&gt;</span><span class="n">set_trace_sync_io</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">is_stopping</span><span class="p">())</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">VerifyNoStrongBaseObjects</span><span class="p">();</span>
      <span class="n">exit_code</span> <span class="o">=</span> <span class="n">EmitExit</span><span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="n">get</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="n">ResetStdio</span><span class="p">();</span>

<span class="cp">#if HAVE_INSPECTOR &amp;&amp; defined(__POSIX__) &amp;&amp; !defined(NODE_SHARED_MODE)
</span><span class="cp"></span>  <span class="k">struct</span> <span class="nc">sigaction</span> <span class="n">act</span><span class="p">;</span>
  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">act</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">act</span><span class="p">));</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="n">nr</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">nr</span> <span class="o">&lt;</span> <span class="n">kMaxSignal</span><span class="p">;</span> <span class="n">nr</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">nr</span> <span class="o">==</span> <span class="n">SIGKILL</span> <span class="o">||</span> <span class="n">nr</span> <span class="o">==</span> <span class="n">SIGSTOP</span> <span class="o">||</span> <span class="n">nr</span> <span class="o">==</span> <span class="n">SIGPROF</span><span class="p">)</span>
      <span class="k">continue</span><span class="p">;</span>
    <span class="n">act</span><span class="p">.</span><span class="n">sa_handler</span> <span class="o">=</span> <span class="p">(</span><span class="n">nr</span> <span class="o">==</span> <span class="n">SIGPIPE</span><span class="p">)</span> <span class="o">?</span> <span class="nl">SIG_IGN</span> <span class="p">:</span> <span class="n">SIG_DFL</span><span class="p">;</span>
    <span class="n">CHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">sigaction</span><span class="p">(</span><span class="n">nr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">act</span><span class="p">,</span> <span class="k">nullptr</span><span class="p">));</span>
  <span class="p">}</span>
<span class="cp">#endif
</span><span class="cp"></span>
<span class="cp">#if defined(LEAK_SANITIZER)
</span><span class="cp"></span>  <span class="n">__lsan_do_leak_check</span><span class="p">();</span>
<span class="cp">#endif
</span><span class="cp"></span>  <span class="p">}</span>

  <span class="k">return</span> <span class="n">exit_code</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>首先根据<code>isolate</code>创建<code>Locker</code>，用来完成<code>isolate</code>隔离以及线程独占。</p>
<p>之后调用<code>CreateMainEnvironment</code>创建环境，初始化<code>env</code>，<code>Environment</code>可以理解为<code>Node.js</code>的运行环境。</p>
<p>这里做了大量的初始化工作，展开分析一下。</p>
<p><code>CreateMainEnvironment</code>中创建了一个<code>Context</code>，然后初始化了一个<code>DeleteFnPtr</code>指针(本质上是<code>unique_ptr</code>)，之后通过这个指针初始化<code>Context</code>，之后调用<code>RunBootstrapping</code>，正式开始<code>Bootstrap</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">Environment</span><span class="o">::</span><span class="n">RunBootstrapping</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">EscapableHandleScope</span> <span class="nf">scope</span><span class="p">(</span><span class="n">isolate_</span><span class="p">);</span>

  <span class="n">CHECK</span><span class="p">(</span><span class="o">!</span><span class="n">has_run_bootstrapping_code</span><span class="p">());</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">BootstrapInternalLoaders</span><span class="p">().</span><span class="n">IsEmpty</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="n">Local</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">result</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">BootstrapNode</span><span class="p">().</span><span class="n">ToLocal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">result</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="c1">// Make sure that no request or handle is created during bootstrap -
</span><span class="c1"></span>  <span class="c1">// if necessary those should be done in pre-execution.
</span><span class="c1"></span>  <span class="c1">// Usually, doing so would trigger the checks present in the ReqWrap and
</span><span class="c1"></span>  <span class="c1">// HandleWrap classes, so this is only a consistency check.
</span><span class="c1"></span>  <span class="n">CHECK</span><span class="p">(</span><span class="n">req_wrap_queue</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">IsEmpty</span><span class="p">());</span>
  <span class="n">CHECK</span><span class="p">(</span><span class="n">handle_wrap_queue</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">IsEmpty</span><span class="p">());</span>

  <span class="n">set_has_run_bootstrapping_code</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>

  <span class="k">return</span> <span class="n">scope</span><span class="p">.</span><span class="n">Escape</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>除了一些检查逻辑外，<code>RunBootstrapping</code>主要是调用了<code>BootstrapInternalLoaders</code>和<code>BootstrapNode</code>，其中第一步<code>BootstrapInternalLoaders</code>完成了内建模块和核心<code>JS</code>模块的加载。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node.cc
</span><span class="c1"></span><span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">Environment</span><span class="o">::</span><span class="n">BootstrapInternalLoaders</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">EscapableHandleScope</span> <span class="nf">scope</span><span class="p">(</span><span class="n">isolate_</span><span class="p">);</span>

  <span class="c1">// Create binding loaders
</span><span class="c1"></span>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">loaders_params</span> <span class="o">=</span> <span class="p">{</span>
      <span class="n">process_string</span><span class="p">(),</span>
      <span class="n">FIXED_ONE_BYTE_STRING</span><span class="p">(</span><span class="n">isolate_</span><span class="p">,</span> <span class="s">&#34;getLinkedBinding&#34;</span><span class="p">),</span>
      <span class="n">FIXED_ONE_BYTE_STRING</span><span class="p">(</span><span class="n">isolate_</span><span class="p">,</span> <span class="s">&#34;getInternalBinding&#34;</span><span class="p">),</span>
      <span class="n">primordials_string</span><span class="p">()};</span>
  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;&gt;</span> <span class="n">loaders_args</span> <span class="o">=</span> <span class="p">{</span>
      <span class="n">process_object</span><span class="p">(),</span>
      <span class="n">NewFunctionTemplate</span><span class="p">(</span><span class="n">binding</span><span class="o">::</span><span class="n">GetLinkedBinding</span><span class="p">)</span>
          <span class="o">-&gt;</span><span class="n">GetFunction</span><span class="p">(</span><span class="n">context</span><span class="p">())</span>
          <span class="p">.</span><span class="n">ToLocalChecked</span><span class="p">(),</span>
      <span class="n">NewFunctionTemplate</span><span class="p">(</span><span class="n">binding</span><span class="o">::</span><span class="n">GetInternalBinding</span><span class="p">)</span>
          <span class="o">-&gt;</span><span class="n">GetFunction</span><span class="p">(</span><span class="n">context</span><span class="p">())</span>
          <span class="p">.</span><span class="n">ToLocalChecked</span><span class="p">(),</span>
      <span class="n">primordials</span><span class="p">()};</span>

  <span class="c1">// Bootstrap internal loaders
</span><span class="c1"></span>  <span class="n">Local</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">loader_exports</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ExecuteBootstrapper</span><span class="p">(</span>
           <span class="k">this</span><span class="p">,</span> <span class="s">&#34;internal/bootstrap/loaders&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">loaders_params</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">loaders_args</span><span class="p">)</span>
           <span class="p">.</span><span class="n">ToLocal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">loader_exports</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="n">CHECK</span><span class="p">(</span><span class="n">loader_exports</span><span class="o">-&gt;</span><span class="n">IsObject</span><span class="p">());</span>
  <span class="n">Local</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">loader_exports_obj</span> <span class="o">=</span> <span class="n">loader_exports</span><span class="p">.</span><span class="n">As</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="n">Local</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">internal_binding_loader</span> <span class="o">=</span>
      <span class="n">loader_exports_obj</span><span class="o">-&gt;</span><span class="n">Get</span><span class="p">(</span><span class="n">context</span><span class="p">(),</span> <span class="n">internal_binding_string</span><span class="p">())</span>
          <span class="p">.</span><span class="n">ToLocalChecked</span><span class="p">();</span>
  <span class="n">CHECK</span><span class="p">(</span><span class="n">internal_binding_loader</span><span class="o">-&gt;</span><span class="n">IsFunction</span><span class="p">());</span>
  <span class="n">set_internal_binding_loader</span><span class="p">(</span><span class="n">internal_binding_loader</span><span class="p">.</span><span class="n">As</span><span class="o">&lt;</span><span class="n">Function</span><span class="o">&gt;</span><span class="p">());</span>
  <span class="n">Local</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">require</span> <span class="o">=</span>
      <span class="n">loader_exports_obj</span><span class="o">-&gt;</span><span class="n">Get</span><span class="p">(</span><span class="n">context</span><span class="p">(),</span> <span class="n">require_string</span><span class="p">()).</span><span class="n">ToLocalChecked</span><span class="p">();</span>
  <span class="n">CHECK</span><span class="p">(</span><span class="n">require</span><span class="o">-&gt;</span><span class="n">IsFunction</span><span class="p">());</span>
  <span class="n">set_native_module_require</span><span class="p">(</span><span class="n">require</span><span class="p">.</span><span class="n">As</span><span class="o">&lt;</span><span class="n">Function</span><span class="o">&gt;</span><span class="p">());</span>

  <span class="k">return</span> <span class="n">scope</span><span class="p">.</span><span class="n">Escape</span><span class="p">(</span><span class="n">loader_exports</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>根据注释，流程分为了两步：<code>Create binding loaders</code>和<code>Bootstrap internal loaders</code>，第一步准备了两个参数<code>loaders_params</code>和<code>loaders_args</code>供第二步使用，两者的内容是相同的，区别是<code>params</code>是字符串形式的，<code>args</code>是真正的对象。其中，</p>
<ul>
<li><code>process</code>参数就是<code>Node.js</code>中的全局对象<code>process</code></li>
<li><code>getLinkedBinding</code>和<code>getInternalBinding</code>实现<code>JS</code>端获取<code>C++</code>模块，两者都是<code>V8</code>的<code>FunctionTemplate</code>，实现<code>JS</code>函数与<code>C++</code>函数的关联，以便<code>JS</code>调用<code>C++</code>函数。</li>
<li><code> primordials</code>是<code>JS</code>常用的内置对象，<code>Error, Symbol, String, Boolean</code>等。</li>
</ul>
<p>之前说到，内建模块在<code>InitializeNodeWithArgs</code>中被注册到一个链表上，然后有一个<code>GetInternalBinding</code>方法，用来取出内建模块。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node_binding.cc
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">GetInternalBinding</span><span class="p">(</span><span class="k">const</span> <span class="n">FunctionCallbackInfo</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;&amp;</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Environment</span><span class="o">*</span> <span class="n">env</span> <span class="o">=</span> <span class="n">Environment</span><span class="o">::</span><span class="n">GetCurrent</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

  <span class="n">CHECK</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">IsString</span><span class="p">());</span>

  <span class="n">Local</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">module</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">As</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="n">node</span><span class="o">::</span><span class="n">Utf8Value</span> <span class="n">module_v</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">isolate</span><span class="p">(),</span> <span class="n">module</span><span class="p">);</span>
  <span class="n">Local</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">exports</span><span class="p">;</span>

  <span class="n">node_module</span><span class="o">*</span> <span class="n">mod</span> <span class="o">=</span> <span class="n">FindModule</span><span class="p">(</span><span class="n">modlist_internal</span><span class="p">,</span> <span class="o">*</span><span class="n">module_v</span><span class="p">,</span> <span class="n">NM_F_INTERNAL</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">mod</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">exports</span> <span class="o">=</span> <span class="n">InitModule</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">mod</span><span class="p">,</span> <span class="n">module</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="o">*</span><span class="n">module_v</span><span class="p">,</span> <span class="s">&#34;constants&#34;</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">exports</span> <span class="o">=</span> <span class="n">Object</span><span class="o">::</span><span class="n">New</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">isolate</span><span class="p">());</span>
    <span class="n">CHECK</span><span class="p">(</span>
        <span class="n">exports</span><span class="o">-&gt;</span><span class="n">SetPrototype</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">(),</span> <span class="n">Null</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">isolate</span><span class="p">())).</span><span class="n">FromJust</span><span class="p">());</span>
    <span class="n">DefineConstants</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">isolate</span><span class="p">(),</span> <span class="n">exports</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="o">*</span><span class="n">module_v</span><span class="p">,</span> <span class="s">&#34;natives&#34;</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">exports</span> <span class="o">=</span> <span class="n">native_module</span><span class="o">::</span><span class="n">NativeModuleEnv</span><span class="o">::</span><span class="n">GetSourceObject</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">());</span>
    <span class="c1">// Legacy feature: process.binding(&#39;natives&#39;).config contains stringified
</span><span class="c1"></span>    <span class="c1">// config.gypi
</span><span class="c1"></span>    <span class="n">CHECK</span><span class="p">(</span><span class="n">exports</span>
              <span class="o">-&gt;</span><span class="n">Set</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">(),</span>
                    <span class="n">env</span><span class="o">-&gt;</span><span class="n">config_string</span><span class="p">(),</span>
                    <span class="n">native_module</span><span class="o">::</span><span class="n">NativeModuleEnv</span><span class="o">::</span><span class="n">GetConfigString</span><span class="p">(</span>
                        <span class="n">env</span><span class="o">-&gt;</span><span class="n">isolate</span><span class="p">()))</span>
              <span class="p">.</span><span class="n">FromJust</span><span class="p">());</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="n">errmsg</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
    <span class="n">snprintf</span><span class="p">(</span><span class="n">errmsg</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">errmsg</span><span class="p">),</span> <span class="s">&#34;No such module: %s&#34;</span><span class="p">,</span> <span class="o">*</span><span class="n">module_v</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">THROW_ERR_INVALID_MODULE</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">errmsg</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">args</span><span class="p">.</span><span class="n">GetReturnValue</span><span class="p">().</span><span class="n">Set</span><span class="p">(</span><span class="n">exports</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>首先通过一个<code>FindModule</code>函数找到模块，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node_binding.cc
</span><span class="c1"></span><span class="kr">inline</span> <span class="k">struct</span> <span class="nc">node_module</span><span class="o">*</span> <span class="nf">FindModule</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node_module</span><span class="o">*</span> <span class="n">list</span><span class="p">,</span>
                                      <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">name</span><span class="p">,</span>
                                      <span class="kt">int</span> <span class="n">flag</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">struct</span> <span class="nc">node_module</span><span class="o">*</span> <span class="n">mp</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="n">mp</span> <span class="o">=</span> <span class="n">list</span><span class="p">;</span> <span class="n">mp</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">;</span> <span class="n">mp</span> <span class="o">=</span> <span class="n">mp</span><span class="o">-&gt;</span><span class="n">nm_link</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">mp</span><span class="o">-&gt;</span><span class="n">nm_modname</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">CHECK</span><span class="p">(</span><span class="n">mp</span> <span class="o">==</span> <span class="k">nullptr</span> <span class="o">||</span> <span class="p">(</span><span class="n">mp</span><span class="o">-&gt;</span><span class="n">nm_flags</span> <span class="o">&amp;</span> <span class="n">flag</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">mp</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>之后通过<code>InitModule</code>初始化模块，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node_binding.cc
</span><span class="c1"></span><span class="k">static</span> <span class="n">Local</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">InitModule</span><span class="p">(</span><span class="n">Environment</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span>
                                <span class="n">node_module</span><span class="o">*</span> <span class="n">mod</span><span class="p">,</span>
                                <span class="n">Local</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">module</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Internal bindings don&#39;t have a &#34;module&#34; object, only exports.
</span><span class="c1"></span>  <span class="n">Local</span><span class="o">&lt;</span><span class="n">Function</span><span class="o">&gt;</span> <span class="n">ctor</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">binding_data_ctor_template</span><span class="p">()</span>
                             <span class="o">-&gt;</span><span class="n">GetFunction</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">())</span>
                             <span class="p">.</span><span class="n">ToLocalChecked</span><span class="p">();</span>
  <span class="n">Local</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">exports</span> <span class="o">=</span> <span class="n">ctor</span><span class="o">-&gt;</span><span class="n">NewInstance</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">()).</span><span class="n">ToLocalChecked</span><span class="p">();</span>
  <span class="n">CHECK_NULL</span><span class="p">(</span><span class="n">mod</span><span class="o">-&gt;</span><span class="n">nm_register_func</span><span class="p">);</span>
  <span class="n">CHECK_NOT_NULL</span><span class="p">(</span><span class="n">mod</span><span class="o">-&gt;</span><span class="n">nm_context_register_func</span><span class="p">);</span>
  <span class="n">Local</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">unused</span> <span class="o">=</span> <span class="n">Undefined</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">isolate</span><span class="p">());</span>
  <span class="n">mod</span><span class="o">-&gt;</span><span class="n">nm_context_register_func</span><span class="p">(</span><span class="n">exports</span><span class="p">,</span> <span class="n">unused</span><span class="p">,</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">(),</span> <span class="n">mod</span><span class="o">-&gt;</span><span class="n">nm_priv</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">exports</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>初始化时，调用传入的<code>mod</code>的<code>nm_context_register_func</code>方法注册模块，这里以<code>async_wrap</code>模块为例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// async_wrap.cc
</span><span class="c1"></span><span class="kt">void</span> <span class="n">AsyncWrap</span><span class="o">::</span><span class="n">Initialize</span><span class="p">(</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">target</span><span class="p">,</span>
                           <span class="n">Local</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">unused</span><span class="p">,</span>
                           <span class="n">Local</span><span class="o">&lt;</span><span class="n">Context</span><span class="o">&gt;</span> <span class="n">context</span><span class="p">,</span>
                           <span class="kt">void</span><span class="o">*</span> <span class="n">priv</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Environment</span><span class="o">*</span> <span class="n">env</span> <span class="o">=</span> <span class="n">Environment</span><span class="o">::</span><span class="n">GetCurrent</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
  <span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">isolate</span><span class="p">();</span>
  <span class="n">HandleScope</span> <span class="nf">scope</span><span class="p">(</span><span class="n">isolate</span><span class="p">);</span>

  <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetMethod</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s">&#34;setupHooks&#34;</span><span class="p">,</span> <span class="n">SetupHooks</span><span class="p">);</span>
  <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetMethod</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s">&#34;setCallbackTrampoline&#34;</span><span class="p">,</span> <span class="n">SetCallbackTrampoline</span><span class="p">);</span>
  <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetMethod</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s">&#34;pushAsyncContext&#34;</span><span class="p">,</span> <span class="n">PushAsyncContext</span><span class="p">);</span>
  <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetMethod</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s">&#34;popAsyncContext&#34;</span><span class="p">,</span> <span class="n">PopAsyncContext</span><span class="p">);</span>
  <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetMethod</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s">&#34;executionAsyncResource&#34;</span><span class="p">,</span> <span class="n">ExecutionAsyncResource</span><span class="p">);</span>
  <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetMethod</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s">&#34;clearAsyncIdStack&#34;</span><span class="p">,</span> <span class="n">ClearAsyncIdStack</span><span class="p">);</span>
  <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetMethod</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s">&#34;queueDestroyAsyncId&#34;</span><span class="p">,</span> <span class="n">QueueDestroyAsyncId</span><span class="p">);</span>
  <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetMethod</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s">&#34;enablePromiseHook&#34;</span><span class="p">,</span> <span class="n">EnablePromiseHook</span><span class="p">);</span>
  <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetMethod</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s">&#34;disablePromiseHook&#34;</span><span class="p">,</span> <span class="n">DisablePromiseHook</span><span class="p">);</span>
  <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetMethod</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s">&#34;registerDestroyHook&#34;</span><span class="p">,</span> <span class="n">RegisterDestroyHook</span><span class="p">);</span>
  <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>调用初始化函数后，传入的<code>exports</code>上就挂载了<code>setupHooks</code>,<code>setCallbackTrampoline</code>等函数，之后返回<code>exports</code>。</p>
<p>至此，内建函数的装载就完成了。</p>
<p>参数准备完毕后，就调用<code>!ExecuteBootstrapper</code>执行<code>internal/bootstrap/loaders</code>，首先看一下<code>!ExecuteBootstrapper</code>方法。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node.cc
</span><span class="c1"></span><span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">ExecuteBootstrapper</span><span class="p">(</span><span class="n">Environment</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span>
                                      <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">id</span><span class="p">,</span>
                                      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;*</span> <span class="n">parameters</span><span class="p">,</span>
                                      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;&gt;*</span> <span class="n">arguments</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">EscapableHandleScope</span> <span class="nf">scope</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">isolate</span><span class="p">());</span>
  <span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">Function</span><span class="o">&gt;</span> <span class="n">maybe_fn</span> <span class="o">=</span>
      <span class="n">NativeModuleEnv</span><span class="o">::</span><span class="n">LookupAndCompile</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">(),</span> <span class="n">id</span><span class="p">,</span> <span class="n">parameters</span><span class="p">,</span> <span class="n">env</span><span class="p">);</span>

  <span class="n">Local</span><span class="o">&lt;</span><span class="n">Function</span><span class="o">&gt;</span> <span class="n">fn</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">maybe_fn</span><span class="p">.</span><span class="n">ToLocal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fn</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">fn</span><span class="o">-&gt;</span><span class="n">Call</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">(),</span>
                                      <span class="n">Undefined</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">isolate</span><span class="p">()),</span>
                                      <span class="n">arguments</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">(),</span>
                                      <span class="n">arguments</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">());</span>

  <span class="c1">// If there was an error during bootstrap, it must be unrecoverable
</span><span class="c1"></span>  <span class="c1">// (e.g. max call stack exceeded). Clear the stack so that the
</span><span class="c1"></span>  <span class="c1">// AsyncCallbackScope destructor doesn&#39;t fail on the id check.
</span><span class="c1"></span>  <span class="c1">// There are only two ways to have a stack size &gt; 1: 1) the user manually
</span><span class="c1"></span>  <span class="c1">// called MakeCallback or 2) user awaited during bootstrap, which triggered
</span><span class="c1"></span>  <span class="c1">// _tickCallback().
</span><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">IsEmpty</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">env</span><span class="o">-&gt;</span><span class="n">async_hooks</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">clear_async_id_stack</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">scope</span><span class="p">.</span><span class="n">EscapeMaybe</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>可以看到，这里调用<code>LookupAndCompile</code>， 将文件路径字符串传入当作<code>id</code>执行，并返回<code>maybe_fn</code>调用<code>call</code>执行真正意义上的第一个<code>JS</code>文件。</p>
<p>看一下<code>LookupAndCompile</code>，这里的主干代码由秋衣大佬做了修正，具体可以看<a href="https://github.com/nodejs/node/pull/27160">https://github.com/nodejs/node/pull/27160</a>，就不看这个代理类的相关代码了，直接跳到<code>LookupAndCompile</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node_native_module.cc
</span><span class="c1"></span><span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">Function</span><span class="o">&gt;</span> <span class="n">NativeModuleLoader</span><span class="o">::</span><span class="n">LookupAndCompile</span><span class="p">(</span>
    <span class="n">Local</span><span class="o">&lt;</span><span class="n">Context</span><span class="o">&gt;</span> <span class="n">context</span><span class="p">,</span>
    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">id</span><span class="p">,</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;*</span> <span class="n">parameters</span><span class="p">,</span>
    <span class="n">NativeModuleLoader</span><span class="o">::</span><span class="n">Result</span><span class="o">*</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span> <span class="o">=</span> <span class="n">context</span><span class="o">-&gt;</span><span class="n">GetIsolate</span><span class="p">();</span>
  <span class="n">EscapableHandleScope</span> <span class="nf">scope</span><span class="p">(</span><span class="n">isolate</span><span class="p">);</span>

  <span class="n">Local</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">source</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">LoadBuiltinModuleSource</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="n">id</span><span class="p">).</span><span class="n">ToLocal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">source</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{};</span>
  <span class="p">}</span>

  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">filename_s</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&#34;node:&#34;</span><span class="p">)</span> <span class="o">+</span> <span class="n">id</span><span class="p">;</span>
  <span class="n">Local</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">filename</span> <span class="o">=</span>
      <span class="n">OneByteString</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="n">filename_s</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">filename_s</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
  <span class="n">Local</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">line_offset</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">::</span><span class="n">New</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">Local</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">column_offset</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">::</span><span class="n">New</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">ScriptOrigin</span> <span class="nf">origin</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">line_offset</span><span class="p">,</span> <span class="n">column_offset</span><span class="p">,</span> <span class="n">True</span><span class="p">(</span><span class="n">isolate</span><span class="p">));</span>

  <span class="n">ScriptCompiler</span><span class="o">::</span><span class="n">CachedData</span><span class="o">*</span> <span class="n">cached_data</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
  <span class="p">{</span>
    <span class="c1">// Note: The lock here should not extend into the
</span><span class="c1"></span>    <span class="c1">// `CompileFunctionInContext()` call below, because this function may
</span><span class="c1"></span>    <span class="c1">// recurse if there is a syntax error during bootstrap (because the fatal
</span><span class="c1"></span>    <span class="c1">// exception handler is invoked, which may load built-in modules).
</span><span class="c1"></span>    <span class="n">Mutex</span><span class="o">::</span><span class="n">ScopedLock</span> <span class="n">lock</span><span class="p">(</span><span class="n">code_cache_mutex_</span><span class="p">);</span>
    <span class="k">auto</span> <span class="n">cache_it</span> <span class="o">=</span> <span class="n">code_cache_</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">cache_it</span> <span class="o">!=</span> <span class="n">code_cache_</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="p">{</span>
      <span class="c1">// Transfer ownership to ScriptCompiler::Source later.
</span><span class="c1"></span>      <span class="n">cached_data</span> <span class="o">=</span> <span class="n">cache_it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">.</span><span class="n">release</span><span class="p">();</span>
      <span class="n">code_cache_</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">cache_it</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">const</span> <span class="kt">bool</span> <span class="n">has_cache</span> <span class="o">=</span> <span class="n">cached_data</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">;</span>
  <span class="n">ScriptCompiler</span><span class="o">::</span><span class="n">CompileOptions</span> <span class="n">options</span> <span class="o">=</span>
      <span class="n">has_cache</span> <span class="o">?</span> <span class="n">ScriptCompiler</span><span class="o">::</span><span class="nl">kConsumeCodeCache</span>
                <span class="p">:</span> <span class="n">ScriptCompiler</span><span class="o">::</span><span class="n">kEagerCompile</span><span class="p">;</span>
  <span class="n">ScriptCompiler</span><span class="o">::</span><span class="n">Source</span> <span class="n">script_source</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">origin</span><span class="p">,</span> <span class="n">cached_data</span><span class="p">);</span>

  <span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">Function</span><span class="o">&gt;</span> <span class="n">maybe_fun</span> <span class="o">=</span>
      <span class="n">ScriptCompiler</span><span class="o">::</span><span class="n">CompileFunctionInContext</span><span class="p">(</span><span class="n">context</span><span class="p">,</span>
                                               <span class="o">&amp;</span><span class="n">script_source</span><span class="p">,</span>
                                               <span class="n">parameters</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">(),</span>
                                               <span class="n">parameters</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">(),</span>
                                               <span class="mi">0</span><span class="p">,</span>
                                               <span class="k">nullptr</span><span class="p">,</span>
                                               <span class="n">options</span><span class="p">);</span>

  <span class="c1">// This could fail when there are early errors in the native modules,
</span><span class="c1"></span>  <span class="c1">// e.g. the syntax errors
</span><span class="c1"></span>  <span class="n">Local</span><span class="o">&lt;</span><span class="n">Function</span><span class="o">&gt;</span> <span class="n">fun</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">maybe_fun</span><span class="p">.</span><span class="n">ToLocal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fun</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// In the case of early errors, v8 is already capable of
</span><span class="c1"></span>    <span class="c1">// decorating the stack for us - note that we use CompileFunctionInContext
</span><span class="c1"></span>    <span class="c1">// so there is no need to worry about wrappers.
</span><span class="c1"></span>    <span class="k">return</span> <span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">Function</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="c1">// XXX(joyeecheung): this bookkeeping is not exactly accurate because
</span><span class="c1"></span>  <span class="c1">// it only starts after the Environment is created, so the per_context.js
</span><span class="c1"></span>  <span class="c1">// will never be in any of these two sets, but the two sets are only for
</span><span class="c1"></span>  <span class="c1">// testing anyway.
</span><span class="c1"></span>
  <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">has_cache</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">script_source</span><span class="p">.</span><span class="n">GetCachedData</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">rejected</span><span class="p">)</span>
                <span class="o">?</span> <span class="n">Result</span><span class="o">::</span><span class="nl">kWithCache</span>
                <span class="p">:</span> <span class="n">Result</span><span class="o">::</span><span class="n">kWithoutCache</span><span class="p">;</span>
  <span class="c1">// Generate new cache for next compilation
</span><span class="c1"></span>  <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">ScriptCompiler</span><span class="o">::</span><span class="n">CachedData</span><span class="o">&gt;</span> <span class="n">new_cached_data</span><span class="p">(</span>
      <span class="n">ScriptCompiler</span><span class="o">::</span><span class="n">CreateCodeCacheForFunction</span><span class="p">(</span><span class="n">fun</span><span class="p">));</span>
  <span class="n">CHECK_NOT_NULL</span><span class="p">(</span><span class="n">new_cached_data</span><span class="p">);</span>

  <span class="p">{</span>
    <span class="n">Mutex</span><span class="o">::</span><span class="n">ScopedLock</span> <span class="n">lock</span><span class="p">(</span><span class="n">code_cache_mutex_</span><span class="p">);</span>
    <span class="c1">// The old entry should&#39;ve been erased by now so we can just emplace.
</span><span class="c1"></span>    <span class="c1">// If another thread did the same thing in the meantime, that should not
</span><span class="c1"></span>    <span class="c1">// be an issue.
</span><span class="c1"></span>    <span class="n">code_cache_</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">new_cached_data</span><span class="p">));</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">scope</span><span class="p">.</span><span class="n">Escape</span><span class="p">(</span><span class="n">fun</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>首先调用<code>LoadBuiltinModuleSource</code>加载文件代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node_native_module.cc
</span><span class="c1"></span><span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">NativeModuleLoader</span><span class="o">::</span><span class="n">LoadBuiltinModuleSource</span><span class="p">(</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span>
                                                               <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
<span class="cp">#ifdef NODE_BUILTIN_MODULES_PATH
</span><span class="cp"></span>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">filename</span> <span class="o">=</span> <span class="n">OnDiskFileName</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

  <span class="n">uv_fs_t</span> <span class="n">req</span><span class="p">;</span>
  <span class="n">uv_file</span> <span class="n">file</span> <span class="o">=</span>
      <span class="n">uv_fs_open</span><span class="p">(</span><span class="k">nullptr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">req</span><span class="p">,</span> <span class="n">filename</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">O_RDONLY</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">nullptr</span><span class="p">);</span>
  <span class="n">CHECK_GE</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">result</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">uv_fs_req_cleanup</span><span class="p">(</span><span class="o">&amp;</span><span class="n">req</span><span class="p">);</span>

  <span class="k">auto</span> <span class="n">defer_close</span> <span class="o">=</span> <span class="n">OnScopeLeave</span><span class="p">([</span><span class="n">file</span><span class="p">]()</span> <span class="p">{</span>
    <span class="n">uv_fs_t</span> <span class="n">close_req</span><span class="p">;</span>
    <span class="n">CHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">uv_fs_close</span><span class="p">(</span><span class="k">nullptr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">close_req</span><span class="p">,</span> <span class="n">file</span><span class="p">,</span> <span class="k">nullptr</span><span class="p">));</span>
    <span class="n">uv_fs_req_cleanup</span><span class="p">(</span><span class="o">&amp;</span><span class="n">close_req</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">contents</span><span class="p">;</span>
  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">4096</span><span class="p">];</span>
  <span class="n">uv_buf_t</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">uv_buf_init</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buffer</span><span class="p">));</span>

  <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span>
        <span class="n">uv_fs_read</span><span class="p">(</span><span class="k">nullptr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">req</span><span class="p">,</span> <span class="n">file</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">contents</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span> <span class="k">nullptr</span><span class="p">);</span>
    <span class="n">CHECK_GE</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">result</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="n">uv_fs_req_cleanup</span><span class="p">(</span><span class="o">&amp;</span><span class="n">req</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">contents</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">buf</span><span class="p">.</span><span class="n">base</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">String</span><span class="o">::</span><span class="n">NewFromUtf8</span><span class="p">(</span>
      <span class="n">isolate</span><span class="p">,</span> <span class="n">contents</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">v8</span><span class="o">::</span><span class="n">NewStringType</span><span class="o">::</span><span class="n">kNormal</span><span class="p">,</span> <span class="n">contents</span><span class="p">.</span><span class="n">length</span><span class="p">());</span>
<span class="cp">#else
</span><span class="cp"></span>  <span class="k">const</span> <span class="k">auto</span> <span class="n">source_it</span> <span class="o">=</span> <span class="n">source_</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
  <span class="n">CHECK_NE</span><span class="p">(</span><span class="n">source_it</span><span class="p">,</span> <span class="n">source_</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
  <span class="k">return</span> <span class="n">source_it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">.</span><span class="n">ToStringChecked</span><span class="p">(</span><span class="n">isolate</span><span class="p">);</span>
<span class="cp">#endif  </span><span class="c1">// NODE_BUILTIN_MODULES_PATH
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这里加载本地文件使用了<code>libuv</code>相关的函数，之后调用<code>CompileFunctionInContext</code>将之前的文件代码和含有<code>getLinkedBinding</code>等方法的参数包裹起来形成一个可执行函数，执行这个函数就等同于执行<code>internal/bootstrap/loaders</code>。</p>
<p>分析完成如何编译<code>internal/bootstrap/loaders</code>之后，进入这个文件看看。</p>
<p>注释写得很长很详细，这里概括一下。</p>
<p>这个文件创建了<code>native module</code>加载器，并且给其通过<code>binding loaders</code>调用内建函数的能立。而且指出这里和<code>CommonJS Module</code>和<code>ES Module</code>是不同的机制。<code>native module</code>就是指<code>lib/**/*.js</code>和<code>*deps/**/\*.js*</code>。所有核心模块都是通过<code>js2c.py</code>生成的<code>node_javascript.cc</code>编译到二进制文件中，因此调用时不需要消耗<code>I/O</code>。</p>
<p>文件首先定义了<code>process</code>上的<code>moduleLoadList</code>属性，用来表示已加载的模块。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">moduleLoadList</span> <span class="o">=</span> <span class="p">[];</span>
<span class="nx">ObjectDefineProperty</span><span class="p">(</span><span class="nx">process</span><span class="p">,</span> <span class="s1">&#39;moduleLoadList&#39;</span><span class="p">,</span> <span class="p">{</span>
  <span class="nx">value</span><span class="o">:</span> <span class="nx">moduleLoadList</span><span class="p">,</span>
  <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="nx">writable</span><span class="o">:</span> <span class="kc">false</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><p>之后定义了<code>binding</code>和<code>_linkedBinding</code>方法，分别通过<code>internalBinding</code>方法和<code>getLinkedBinding</code>方法获取内建模块。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">process</span><span class="p">.</span><span class="nx">binding</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">binding</span><span class="p">(</span><span class="nx">module</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">module</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="nx">module</span><span class="p">);</span>
  <span class="c1">// Deprecated specific process.binding() modules, but not all, allow
</span><span class="c1"></span>  <span class="c1">// selective fallback to internalBinding for the deprecated ones.
</span><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">internalBindingWhitelist</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">module</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">internalBinding</span><span class="p">(</span><span class="nx">module</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="c1">// eslint-disable-next-line no-restricted-syntax
</span><span class="c1"></span>  <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`No such module: </span><span class="si">${</span><span class="nx">module</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
<span class="p">};</span>
<span class="nx">process</span><span class="p">.</span><span class="nx">_linkedBinding</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">_linkedBinding</span><span class="p">(</span><span class="nx">module</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">module</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="nx">module</span><span class="p">);</span>
  <span class="kd">let</span> <span class="nx">mod</span> <span class="o">=</span> <span class="nx">bindingObj</span><span class="p">[</span><span class="nx">module</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">mod</span> <span class="o">!==</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span>
    <span class="nx">mod</span> <span class="o">=</span> <span class="nx">bindingObj</span><span class="p">[</span><span class="nx">module</span><span class="p">]</span> <span class="o">=</span> <span class="nx">getLinkedBinding</span><span class="p">(</span><span class="nx">module</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">mod</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>之后创建了<code>NativeModule</code>类，提供了内部<code>JS</code>模块的抽象，用于加载被写入<code>node_javascript.cc</code>的<code>JS</code>模块。</p>
<p>之后解释了<code>require</code>的机制。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">loaderExports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">internalBinding</span><span class="p">,</span>
  <span class="nx">NativeModule</span><span class="p">,</span>
  <span class="nx">require</span><span class="o">:</span> <span class="nx">nativeModuleRequire</span>
<span class="p">};</span>

<span class="kd">function</span> <span class="nx">nativeModuleRequire</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">loaderId</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">loaderExports</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kr">const</span> <span class="nx">mod</span> <span class="o">=</span> <span class="nx">NativeModule</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
  <span class="c1">// Can&#39;t load the internal errors module from here, have to use a raw error.
</span><span class="c1"></span>  <span class="c1">// eslint-disable-next-line no-restricted-syntax
</span><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">mod</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="sb">`Missing internal module &#39;</span><span class="si">${</span><span class="nx">id</span><span class="si">}</span><span class="sb">&#39;`</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">mod</span><span class="p">.</span><span class="nx">compileForInternalLoader</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>首先根据<code>id</code>找到模块，然后调用<code>compileForInternalLoader</code>通过<code>node_native_module_env.cc</code>的<code>CompileFunction</code>函数实现对模块的装裹，同时提供了6个参数，分别是<code>exports</code>,<code>require</code>,<code>module</code>,<code>process</code>,<code>internalBinding</code>,<code>primordials</code>。</p>
<p>至此，内建模块<code>built-in module</code>以及内部<code>JS</code>模块<code>native module</code>装载完毕。</p>
<p>第一步<code>BootstrapInternalLoaders</code>结束后，执行第二步<code>BootstrapNode</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node.cc
</span><span class="c1"></span><span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">Environment</span><span class="o">::</span><span class="n">BootstrapNode</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">EscapableHandleScope</span> <span class="nf">scope</span><span class="p">(</span><span class="n">isolate_</span><span class="p">);</span>

  <span class="n">Local</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">global</span> <span class="o">=</span> <span class="n">context</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Global</span><span class="p">();</span>
  <span class="c1">// TODO(joyeecheung): this can be done in JS land now.
</span><span class="c1"></span>  <span class="n">global</span><span class="o">-&gt;</span><span class="n">Set</span><span class="p">(</span><span class="n">context</span><span class="p">(),</span> <span class="n">FIXED_ONE_BYTE_STRING</span><span class="p">(</span><span class="n">isolate_</span><span class="p">,</span> <span class="s">&#34;global&#34;</span><span class="p">),</span> <span class="n">global</span><span class="p">)</span>
      <span class="p">.</span><span class="n">Check</span><span class="p">();</span>

  <span class="c1">// process, require, internalBinding, primordials
</span><span class="c1"></span>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">node_params</span> <span class="o">=</span> <span class="p">{</span>
      <span class="n">process_string</span><span class="p">(),</span>
      <span class="n">require_string</span><span class="p">(),</span>
      <span class="n">internal_binding_string</span><span class="p">(),</span>
      <span class="n">primordials_string</span><span class="p">()};</span>
  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;&gt;</span> <span class="n">node_args</span> <span class="o">=</span> <span class="p">{</span>
      <span class="n">process_object</span><span class="p">(),</span>
      <span class="n">native_module_require</span><span class="p">(),</span>
      <span class="n">internal_binding_loader</span><span class="p">(),</span>
      <span class="n">primordials</span><span class="p">()};</span>

  <span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">ExecuteBootstrapper</span><span class="p">(</span>
      <span class="k">this</span><span class="p">,</span> <span class="s">&#34;internal/bootstrap/node&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">node_params</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">node_args</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">IsEmpty</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">scope</span><span class="p">.</span><span class="n">EscapeMaybe</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// TODO(joyeecheung): skip these in the snapshot building for workers.
</span><span class="c1"></span>  <span class="k">auto</span> <span class="n">thread_switch_id</span> <span class="o">=</span>
      <span class="n">is_main_thread</span><span class="p">()</span> <span class="o">?</span> <span class="s">&#34;internal/bootstrap/switches/is_main_thread&#34;</span>
                       <span class="o">:</span> <span class="s">&#34;internal/bootstrap/switches/is_not_main_thread&#34;</span><span class="p">;</span>
  <span class="n">result</span> <span class="o">=</span>
      <span class="n">ExecuteBootstrapper</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">thread_switch_id</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">node_params</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">node_args</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">IsEmpty</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">scope</span><span class="p">.</span><span class="n">EscapeMaybe</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">auto</span> <span class="n">process_state_switch_id</span> <span class="o">=</span>
      <span class="n">owns_process_state</span><span class="p">()</span>
          <span class="o">?</span> <span class="s">&#34;internal/bootstrap/switches/does_own_process_state&#34;</span>
          <span class="o">:</span> <span class="s">&#34;internal/bootstrap/switches/does_not_own_process_state&#34;</span><span class="p">;</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">ExecuteBootstrapper</span><span class="p">(</span>
      <span class="k">this</span><span class="p">,</span> <span class="n">process_state_switch_id</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">node_params</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">node_args</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">IsEmpty</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">scope</span><span class="p">.</span><span class="n">EscapeMaybe</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">Local</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">env_string</span> <span class="o">=</span> <span class="n">FIXED_ONE_BYTE_STRING</span><span class="p">(</span><span class="n">isolate_</span><span class="p">,</span> <span class="s">&#34;env&#34;</span><span class="p">);</span>
  <span class="n">Local</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">env_var_proxy</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">CreateEnvVarProxy</span><span class="p">(</span><span class="n">context</span><span class="p">(),</span> <span class="n">isolate_</span><span class="p">).</span><span class="n">ToLocal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">env_var_proxy</span><span class="p">)</span> <span class="o">||</span>
      <span class="n">process_object</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Set</span><span class="p">(</span><span class="n">context</span><span class="p">(),</span> <span class="n">env_string</span><span class="p">,</span> <span class="n">env_var_proxy</span><span class="p">).</span><span class="n">IsNothing</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">scope</span><span class="p">.</span><span class="n">EscapeMaybe</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>首先在<code>context</code>上设置了一个<code>global</code>代理，它定义在<code>deps\v8\src\objects\js-objects.h</code>，并且可以通过在<code>Node</code>层调用<code>global</code>对象修改底层的<code>global</code>对象。</p>
<p>之后同样的，调用<code>ExecuteBootstrapper</code>，并将<code>env</code>，<code>internal/bootstrap/node</code>作为<code>id</code>，<code>node_params</code>以及<code>node_args</code>传入，不过这里参数有所改变，分别是<code>native_module_require</code>和<code>internal_binding_loader</code>。</p>
<p><code>ExecuteBootstrapper</code>之前分析过了，这里直接看一下<code>lib\internal\bootstrap\node.js</code>。</p>
<p>同样的，这里注释很详细，大体概括一下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// Hello, and welcome to hacking node.js!
</span><span class="c1">//
</span><span class="c1">// This file is invoked by `node::RunBootstrapping()` in `src/node.cc`, and is
</span><span class="c1">// responsible for setting up node.js core before executing main scripts
</span><span class="c1">// under `lib/internal/main/`.
</span><span class="c1">//
</span><span class="c1">// This file is expected not to perform any asynchronous operations itself
</span><span class="c1">// when being executed - those should be done in either
</span><span class="c1">// `lib/internal/bootstrap/pre_execution.js` or in main scripts. The majority
</span><span class="c1">// of the code here focuses on setting up the global proxy and the process
</span><span class="c1">// object in a synchronous manner.
</span><span class="c1">// As special caution is given to the performance of the startup process,
</span><span class="c1">// many dependencies are invoked lazily.
</span></code></pre></td></tr></table>
</div>
</div><p>第一句很有趣，<code>Hello, and welcome to hacking node.js!</code>。</p>
<p>这个文件只做同步操作，并且指出处理异步操作的位置<code>lib/internal/bootstrap/pre_execution.js</code>，之后说明，此文件主要是设置<code>global</code>代理和<code>process</code>对象，并且该文件启动了主线程和工作线程，这个<code>worker threads</code>主要用在<code>CPU</code>密集的场景，并且每个<code>worker thread</code>拥有独立的<code>V8 ioslate</code>，<code>libuv</code>以及<code>event loop</code>，有机会再展开说。</p>
<p>之后启动了主线程以及工作线程，然后设置了<code>global</code>对象和<code>process</code>对象上的一些属性，包括<code>global.URL, global.clearInterval, global.setInterval</code>等等，最后设置了异常回调以及任务队列<code>TaskQueue</code>。</p>
<p><code>CreateMainEnvironment</code>完成一大堆工作之后，调用<code>LoadEnvironment</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// environment.cc
</span><span class="c1"></span><span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">LoadEnvironment</span><span class="p">(</span>
    <span class="n">Environment</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span>
    <span class="n">StartExecutionCallback</span> <span class="n">cb</span><span class="p">,</span>
    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">InspectorParentHandle</span><span class="o">&gt;</span> <span class="n">removeme</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">env</span><span class="o">-&gt;</span><span class="n">InitializeLibuv</span><span class="p">();</span>
  <span class="n">env</span><span class="o">-&gt;</span><span class="n">InitializeDiagnostics</span><span class="p">();</span>

  <span class="k">return</span> <span class="nf">StartExecution</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">cb</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p><code>LoadEnvironment</code>首先是初始化<code>libuv</code>和异常诊断程序，然后执行启动<code>StartExecution</code>。</p>
<p>这个<code>StartExecution</code>函数实现的就是根据用户的启动参数，来以不同模式启动，并执行对应的启动文件。比如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node.cc
</span><span class="c1"></span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">first_argv</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">().</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">first_argv</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">()[</span><span class="mi">1</span><span class="p">];</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="n">first_argv</span> <span class="o">==</span> <span class="s">&#34;inspect&#34;</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">StartExecution</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;internal/main/inspect&#34;</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="n">per_process</span><span class="o">::</span><span class="n">cli_options</span><span class="o">-&gt;</span><span class="n">print_help</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">StartExecution</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;internal/main/print_help&#34;</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">options</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">prof_process</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">StartExecution</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;internal/main/prof_process&#34;</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// -e/--eval without -i/--interactive
</span><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">options</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">has_eval_string</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">options</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">force_repl</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">StartExecution</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;internal/main/eval_string&#34;</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">options</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">syntax_check_only</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">StartExecution</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;internal/main/check_syntax&#34;</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">first_argv</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">first_argv</span> <span class="o">!=</span> <span class="s">&#34;-&#34;</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">StartExecution</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;internal/main/run_main_module&#34;</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">options</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">force_repl</span> <span class="o">||</span> <span class="n">uv_guess_handle</span><span class="p">(</span><span class="n">STDIN_FILENO</span><span class="p">)</span> <span class="o">==</span> <span class="n">UV_TTY</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">StartExecution</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;internal/main/repl&#34;</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">return</span> <span class="nf">StartExecution</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;internal/main/eval_stdin&#34;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>其中<code>inspect</code>就是调试模式，下面也可以看到<code>repl</code>环境的启动模式。</p>
<p>而默认的不带参数的启动模式如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">first_argv</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">first_argv</span> <span class="o">!=</span> <span class="s">&#34;-&#34;</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">StartExecution</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;internal/main/run_main_module&#34;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>看这个文件之前，先分析<code>StartExecution</code>是如何执行这个文件的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// node.cc
</span><span class="c1"></span><span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">StartExecution</span><span class="p">(</span><span class="n">Environment</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">main_script_id</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">EscapableHandleScope</span> <span class="nf">scope</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">isolate</span><span class="p">());</span>
  <span class="n">CHECK_NOT_NULL</span><span class="p">(</span><span class="n">main_script_id</span><span class="p">);</span>

  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">parameters</span> <span class="o">=</span> <span class="p">{</span>
      <span class="n">env</span><span class="o">-&gt;</span><span class="n">process_string</span><span class="p">(),</span>
      <span class="n">env</span><span class="o">-&gt;</span><span class="n">require_string</span><span class="p">(),</span>
      <span class="n">env</span><span class="o">-&gt;</span><span class="n">internal_binding_string</span><span class="p">(),</span>
      <span class="n">env</span><span class="o">-&gt;</span><span class="n">primordials_string</span><span class="p">(),</span>
      <span class="n">FIXED_ONE_BYTE_STRING</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">isolate</span><span class="p">(),</span> <span class="s">&#34;markBootstrapComplete&#34;</span><span class="p">)};</span>

  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;&gt;</span> <span class="n">arguments</span> <span class="o">=</span> <span class="p">{</span>
      <span class="n">env</span><span class="o">-&gt;</span><span class="n">process_object</span><span class="p">(),</span>
      <span class="n">env</span><span class="o">-&gt;</span><span class="n">native_module_require</span><span class="p">(),</span>
      <span class="n">env</span><span class="o">-&gt;</span><span class="n">internal_binding_loader</span><span class="p">(),</span>
      <span class="n">env</span><span class="o">-&gt;</span><span class="n">primordials</span><span class="p">(),</span>
      <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewFunctionTemplate</span><span class="p">(</span><span class="n">MarkBootstrapComplete</span><span class="p">)</span>
          <span class="o">-&gt;</span><span class="n">GetFunction</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">())</span>
          <span class="p">.</span><span class="n">ToLocalChecked</span><span class="p">()};</span>

  <span class="k">return</span> <span class="n">scope</span><span class="p">.</span><span class="n">EscapeMaybe</span><span class="p">(</span>
      <span class="n">ExecuteBootstrapper</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">main_script_id</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">parameters</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">arguments</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>发现还是一样，传入要执行的<code>JS</code>文件作为<code>ID</code>，然后老几样，<code>process, require, pprimordials, internal_binding_loader</code>，只是少了一个<code>getLinkedBinding</code>，多了一个<code>markBootstrapComplete</code>的标记而已，然后调用<code>ExecuteBootstrapper</code>。</p>
<p>之后看一下<code>lib\internal\main\run_main_module.js</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// lib\internal\main\run_main_module.js
</span><span class="c1"></span><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

<span class="kr">const</span> <span class="p">{</span>
  <span class="nx">prepareMainThreadExecution</span>
<span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;internal/bootstrap/pre_execution&#39;</span><span class="p">);</span>

<span class="nx">prepareMainThreadExecution</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>

<span class="nx">markBootstrapComplete</span><span class="p">();</span>

<span class="c1">// Note: this loads the module through the ESM loader if the module is
</span><span class="c1">// determined to be an ES module. This hangs from the CJS module loader
</span><span class="c1">// because we currently allow monkey-patching of the module loaders
</span><span class="c1">// in the preloaded scripts through require(&#39;module&#39;).
</span><span class="c1">// runMain here might be monkey-patched by users in --require.
</span><span class="c1">// XXX: the monkey-patchability here should probably be deprecated.
</span><span class="c1"></span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;internal/modules/cjs/loader&#39;</span><span class="p">).</span><span class="nx">Module</span><span class="p">.</span><span class="nx">runMain</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</code></pre></td></tr></table>
</div>
</div><p>代码很短，主要是执行<code>prepareMainThreadExecution</code>，做最后初始化工作，并标记<code>Bootstrap</code>已完成。</p>
<p>然后通过引入<code>'internal/modules/cjs/loader</code>，调用<code>runMain</code>方法执行要启动的<code>JS</code>文件，就比如<code>node index.js</code>里的<code>index.js</code>。这里执行的是其中的同步代码，异步代码会放到后续的<code>Event Loop</code>中。</p>
<p>其中有两步需要注意。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// pre_execution.js
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">initializeCJSLoader</span><span class="p">()</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">CJSLoader</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;internal/modules/cjs/loader&#39;</span><span class="p">);</span>
  <span class="nx">CJSLoader</span><span class="p">.</span><span class="nx">Module</span><span class="p">.</span><span class="nx">_initPaths</span><span class="p">();</span>
  <span class="c1">// TODO(joyeecheung): deprecate this in favor of a proper hook?
</span><span class="c1"></span>  <span class="nx">CJSLoader</span><span class="p">.</span><span class="nx">Module</span><span class="p">.</span><span class="nx">runMain</span> <span class="o">=</span>
    <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;internal/modules/run_main&#39;</span><span class="p">).</span><span class="nx">executeUserEntryPoint</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// ...
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">loadPreloadModules</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// For user code, we preload modules if `-r` is passed
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">preloadModules</span> <span class="o">=</span> <span class="nx">getOptionValue</span><span class="p">(</span><span class="s1">&#39;--require&#39;</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">preloadModules</span> <span class="o">&amp;&amp;</span> <span class="nx">preloadModules</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="p">{</span>
      <span class="nx">Module</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">_preloadModules</span>
      <span class="p">},</span>
    <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;internal/modules/cjs/loader&#39;</span><span class="p">);</span>
    <span class="nx">_preloadModules</span><span class="p">(</span><span class="nx">preloadModules</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>首先是初始化<code>CJSLoader</code>，它设置了<code>CJSLoader</code>的<code>runMain</code>方法实际上为<code>'internal/modules/run_main'</code>的<code>executeUserEntryPoint</code>。</p>
<p>然后是<code>loadPreloadModules</code>，这里通过<code>CJSLoader</code>的<code>_preloadModules</code>方法加载传入的<code>require</code>。</p>
<p>这里看一下<code>_preloadModules</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// lib\internal\modules\cjs\loader.js
</span><span class="c1"></span><span class="nx">Module</span><span class="p">.</span><span class="nx">_preloadModules</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">requests</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">ArrayIsArray</span><span class="p">(</span><span class="nx">requests</span><span class="p">))</span>
    <span class="k">return</span><span class="p">;</span>

  <span class="c1">// Preloaded modules have a dummy parent module which is deemed to exist
</span><span class="c1"></span>  <span class="c1">// in the current working directory. This seeds the search path for
</span><span class="c1"></span>  <span class="c1">// preloaded modules.
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">parent</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Module</span><span class="p">(</span><span class="s1">&#39;internal/preload&#39;</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">parent</span><span class="p">.</span><span class="nx">paths</span> <span class="o">=</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">_nodeModulePaths</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">());</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">code</span> <span class="o">!==</span> <span class="s1">&#39;ENOENT&#39;</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="nx">e</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">n</span> <span class="o">&lt;</span> <span class="nx">requests</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">n</span><span class="o">++</span><span class="p">)</span>
    <span class="nx">parent</span><span class="p">.</span><span class="nx">require</span><span class="p">(</span><span class="nx">requests</span><span class="p">[</span><span class="nx">n</span><span class="p">]);</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>这里构造了一个被认为存在于当前工作路径的假的模块，这为预加载的模块提供索引路径，就是说如果我们引用<code>--require</code>的预加载模块，会通过这个路径进行查找。</p>
<p>OK，回去看<code>executeUserEntryPoint</code>，启动文件就是通过这个方法执行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// lib\internal\modules\run_main.js
</span><span class="c1"></span><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">CJSLoader</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;internal/modules/cjs/loader&#39;</span><span class="p">);</span>
<span class="kr">const</span> <span class="p">{</span> <span class="nx">Module</span><span class="p">,</span> <span class="nx">toRealPath</span><span class="p">,</span> <span class="nx">readPackageScope</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">CJSLoader</span><span class="p">;</span>
<span class="kr">const</span> <span class="p">{</span> <span class="nx">getOptionValue</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;internal/options&#39;</span><span class="p">);</span>
<span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">resolveMainPath</span><span class="p">(</span><span class="nx">main</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Note extension resolution for the main entry point can be deprecated in a
</span><span class="c1"></span>  <span class="c1">// future major.
</span><span class="c1"></span>  <span class="c1">// Module._findPath is monkey-patchable here.
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">mainPath</span> <span class="o">=</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">_findPath</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">main</span><span class="p">),</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">mainPath</span><span class="p">)</span>
    <span class="k">return</span><span class="p">;</span>

  <span class="kr">const</span> <span class="nx">preserveSymlinksMain</span> <span class="o">=</span> <span class="nx">getOptionValue</span><span class="p">(</span><span class="s1">&#39;--preserve-symlinks-main&#39;</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">preserveSymlinksMain</span><span class="p">)</span>
    <span class="nx">mainPath</span> <span class="o">=</span> <span class="nx">toRealPath</span><span class="p">(</span><span class="nx">mainPath</span><span class="p">);</span>

  <span class="k">return</span> <span class="nx">mainPath</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">shouldUseESMLoader</span><span class="p">(</span><span class="nx">mainPath</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">userLoader</span> <span class="o">=</span> <span class="nx">getOptionValue</span><span class="p">(</span><span class="s1">&#39;--experimental-loader&#39;</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">userLoader</span><span class="p">)</span>
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="kr">const</span> <span class="nx">esModuleSpecifierResolution</span> <span class="o">=</span>
    <span class="nx">getOptionValue</span><span class="p">(</span><span class="s1">&#39;--experimental-specifier-resolution&#39;</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">esModuleSpecifierResolution</span> <span class="o">===</span> <span class="s1">&#39;node&#39;</span><span class="p">)</span>
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="c1">// Determine the module format of the main
</span><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">mainPath</span> <span class="o">&amp;&amp;</span> <span class="nx">mainPath</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="s1">&#39;.mjs&#39;</span><span class="p">))</span>
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">mainPath</span> <span class="o">||</span> <span class="nx">mainPath</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="s1">&#39;.cjs&#39;</span><span class="p">))</span>
    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
  <span class="kr">const</span> <span class="nx">pkg</span> <span class="o">=</span> <span class="nx">readPackageScope</span><span class="p">(</span><span class="nx">mainPath</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">pkg</span> <span class="o">&amp;&amp;</span> <span class="nx">pkg</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;module&#39;</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">runMainESM</span><span class="p">(</span><span class="nx">mainPath</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">esmLoader</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;internal/process/esm_loader&#39;</span><span class="p">);</span>
  <span class="kr">const</span> <span class="p">{</span> <span class="nx">pathToFileURL</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;internal/url&#39;</span><span class="p">);</span>
  <span class="nx">handleMainPromise</span><span class="p">(</span><span class="nx">esmLoader</span><span class="p">.</span><span class="nx">loadESM</span><span class="p">((</span><span class="nx">ESMLoader</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">isAbsolute</span><span class="p">(</span><span class="nx">mainPath</span><span class="p">)</span> <span class="o">?</span>
      <span class="nx">pathToFileURL</span><span class="p">(</span><span class="nx">mainPath</span><span class="p">).</span><span class="nx">href</span> <span class="o">:</span> <span class="nx">mainPath</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">ESMLoader</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="nx">main</span><span class="p">);</span>
  <span class="p">}));</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">handleMainPromise</span><span class="p">(</span><span class="nx">promise</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Handle a Promise from running code that potentially does Top-Level Await.
</span><span class="c1"></span>  <span class="c1">// In that case, it makes sense to set the exit code to a specific non-zero
</span><span class="c1"></span>  <span class="c1">// value if the main code never finishes running.
</span><span class="c1"></span>  <span class="kd">function</span> <span class="nx">handler</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">exitCode</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span>
      <span class="nx">process</span><span class="p">.</span><span class="nx">exitCode</span> <span class="o">=</span> <span class="mi">13</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">process</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;exit&#39;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">promise</span><span class="p">.</span><span class="k">finally</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">process</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;exit&#39;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">));</span>
<span class="p">}</span>

<span class="c1">// For backwards compatibility, we have to run a bunch of
</span><span class="c1">// monkey-patchable code that belongs to the CJS loader (exposed by
</span><span class="c1">// `require(&#39;module&#39;)`) even when the entry point is ESM.
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">executeUserEntryPoint</span><span class="p">(</span><span class="nx">main</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">resolvedMain</span> <span class="o">=</span> <span class="nx">resolveMainPath</span><span class="p">(</span><span class="nx">main</span><span class="p">);</span>
  <span class="kr">const</span> <span class="nx">useESMLoader</span> <span class="o">=</span> <span class="nx">shouldUseESMLoader</span><span class="p">(</span><span class="nx">resolvedMain</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">useESMLoader</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">runMainESM</span><span class="p">(</span><span class="nx">resolvedMain</span> <span class="o">||</span> <span class="nx">main</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// Module._load is the monkey-patchable CJS module loader.
</span><span class="c1"></span>    <span class="nx">Module</span><span class="p">.</span><span class="nx">_load</span><span class="p">(</span><span class="nx">main</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">executeUserEntryPoint</span><span class="p">,</span>
  <span class="nx">handleMainPromise</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>这里的<code>executeUserEntryPoint</code>方法，首先是找到文件路径并判断模块类别，这里介绍一下<code>cjs</code>的导入方法。</p>
<p>首先会调用<code>Module</code>的<code>_load</code>方法。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// lib\internal\modules\cjs\loader.js
</span><span class="c1"></span><span class="nx">Module</span><span class="p">.</span><span class="nx">_load</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">parent</span><span class="p">,</span> <span class="nx">isMain</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">relResolveCacheIdentifier</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">parent</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">debug</span><span class="p">(</span><span class="s1">&#39;Module._load REQUEST %s parent: %s&#39;</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
    <span class="c1">// Fast path for (lazy loaded) modules in the same directory. The indirect
</span><span class="c1"></span>    <span class="c1">// caching is required to allow cache invalidation without changing the old
</span><span class="c1"></span>    <span class="c1">// cache key names.
</span><span class="c1"></span>    <span class="nx">relResolveCacheIdentifier</span> <span class="o">=</span> <span class="sb">`</span><span class="si">${</span><span class="nx">parent</span><span class="p">.</span><span class="nx">path</span><span class="si">}</span><span class="err">\</span><span class="sb">x00</span><span class="si">${</span><span class="nx">request</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
    <span class="kr">const</span> <span class="nx">filename</span> <span class="o">=</span> <span class="nx">relativeResolveCache</span><span class="p">[</span><span class="nx">relResolveCacheIdentifier</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">filename</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">cachedModule</span> <span class="o">=</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">_cache</span><span class="p">[</span><span class="nx">filename</span><span class="p">];</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">cachedModule</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">updateChildren</span><span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="nx">cachedModule</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">cachedModule</span><span class="p">.</span><span class="nx">loaded</span><span class="p">)</span>
          <span class="k">return</span> <span class="nx">getExportsForCircularRequire</span><span class="p">(</span><span class="nx">cachedModule</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">cachedModule</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">delete</span> <span class="nx">relativeResolveCache</span><span class="p">[</span><span class="nx">relResolveCacheIdentifier</span><span class="p">];</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kr">const</span> <span class="nx">filename</span> <span class="o">=</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">_resolveFilename</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">parent</span><span class="p">,</span> <span class="nx">isMain</span><span class="p">);</span>

  <span class="kr">const</span> <span class="nx">cachedModule</span> <span class="o">=</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">_cache</span><span class="p">[</span><span class="nx">filename</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">cachedModule</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">updateChildren</span><span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="nx">cachedModule</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">cachedModule</span><span class="p">.</span><span class="nx">loaded</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">parseCachedModule</span> <span class="o">=</span> <span class="nx">cjsParseCache</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">cachedModule</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">parseCachedModule</span> <span class="o">||</span> <span class="nx">parseCachedModule</span><span class="p">.</span><span class="nx">loaded</span><span class="p">)</span>
        <span class="k">return</span> <span class="nx">getExportsForCircularRequire</span><span class="p">(</span><span class="nx">cachedModule</span><span class="p">);</span>
      <span class="nx">parseCachedModule</span><span class="p">.</span><span class="nx">loaded</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">cachedModule</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kr">const</span> <span class="nx">mod</span> <span class="o">=</span> <span class="nx">loadNativeModule</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">request</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">mod</span> <span class="o">&amp;&amp;</span> <span class="nx">mod</span><span class="p">.</span><span class="nx">canBeRequiredByUsers</span><span class="p">)</span> <span class="k">return</span> <span class="nx">mod</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>

  <span class="c1">// Don&#39;t call updateChildren(), Module constructor already does.
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">module</span> <span class="o">=</span> <span class="nx">cachedModule</span> <span class="o">||</span> <span class="k">new</span> <span class="nx">Module</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">parent</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">isMain</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">mainModule</span> <span class="o">=</span> <span class="nx">module</span><span class="p">;</span>
    <span class="nx">module</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="s1">&#39;.&#39;</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">Module</span><span class="p">.</span><span class="nx">_cache</span><span class="p">[</span><span class="nx">filename</span><span class="p">]</span> <span class="o">=</span> <span class="nx">module</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">parent</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">relativeResolveCache</span><span class="p">[</span><span class="nx">relResolveCacheIdentifier</span><span class="p">]</span> <span class="o">=</span> <span class="nx">filename</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">let</span> <span class="nx">threw</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="c1">// Intercept exceptions that occur during the first tick and rekey them
</span><span class="c1"></span>    <span class="c1">// on error instance rather than module instance (which will immediately be
</span><span class="c1"></span>    <span class="c1">// garbage collected).
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">getSourceMapsEnabled</span><span class="p">())</span> <span class="p">{</span>
      <span class="k">try</span> <span class="p">{</span>
        <span class="nx">module</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">filename</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">rekeySourceMap</span><span class="p">(</span><span class="nx">Module</span><span class="p">.</span><span class="nx">_cache</span><span class="p">[</span><span class="nx">filename</span><span class="p">],</span> <span class="nx">err</span><span class="p">);</span>
        <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span> <span class="cm">/* node-do-not-add-exception-line */</span>
      <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">module</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">filename</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">threw</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">threw</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">delete</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">_cache</span><span class="p">[</span><span class="nx">filename</span><span class="p">];</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">parent</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">delete</span> <span class="nx">relativeResolveCache</span><span class="p">[</span><span class="nx">relResolveCacheIdentifier</span><span class="p">];</span>
        <span class="kr">const</span> <span class="nx">children</span> <span class="o">=</span> <span class="nx">parent</span> <span class="o">&amp;&amp;</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">ArrayIsArray</span><span class="p">(</span><span class="nx">children</span><span class="p">))</span> <span class="p">{</span>
          <span class="kr">const</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">children</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">module</span><span class="p">);</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">index</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">children</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">&amp;&amp;</span>
               <span class="o">!</span><span class="nx">isProxy</span><span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
               <span class="nx">ObjectGetPrototypeOf</span><span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">)</span> <span class="o">===</span>
                 <span class="nx">CircularRequirePrototypeWarningProxy</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">ObjectSetPrototypeOf</span><span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">,</span> <span class="nx">ObjectPrototype</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>如果当前模块有父模块，会根据父模块找到当前模块的文件名。之后会检查模块是否有缓存，有则直接返回。下一步，会判断模块是否为<code>NativeModule</code>，如果是则直接导出。之后只会是自定义模块了，首先会根据文件名实例化一个<code>Module</code>对象并做缓存处理，然后调用<code>load</code>方法。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// lib\internal\modules\cjs\loader.js
</span><span class="c1"></span><span class="nx">Module</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">load</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">debug</span><span class="p">(</span><span class="s1">&#39;load %j for module %j&#39;</span><span class="p">,</span> <span class="nx">filename</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>

  <span class="nx">assert</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">loaded</span><span class="p">);</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">filename</span> <span class="o">=</span> <span class="nx">filename</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">paths</span> <span class="o">=</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">_nodeModulePaths</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">dirname</span><span class="p">(</span><span class="nx">filename</span><span class="p">));</span>

  <span class="kr">const</span> <span class="nx">extension</span> <span class="o">=</span> <span class="nx">findLongestRegisteredExtension</span><span class="p">(</span><span class="nx">filename</span><span class="p">);</span>
  <span class="c1">// allow .mjs to be overridden
</span><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">filename</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="s1">&#39;.mjs&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">Module</span><span class="p">.</span><span class="nx">_extensions</span><span class="p">[</span><span class="s1">&#39;.mjs&#39;</span><span class="p">])</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nx">ERR_REQUIRE_ESM</span><span class="p">(</span><span class="nx">filename</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">Module</span><span class="p">.</span><span class="nx">_extensions</span><span class="p">[</span><span class="nx">extension</span><span class="p">](</span><span class="k">this</span><span class="p">,</span> <span class="nx">filename</span><span class="p">);</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">loaded</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

  <span class="kr">const</span> <span class="nx">ESMLoader</span> <span class="o">=</span> <span class="nx">asyncESM</span><span class="p">.</span><span class="nx">ESMLoader</span><span class="p">;</span>
  <span class="c1">// Create module entry at load time to snapshot exports correctly
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">exports</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
  <span class="c1">// Preemptively cache
</span><span class="c1"></span>  <span class="k">if</span> <span class="p">((</span><span class="nx">module</span><span class="o">?</span><span class="p">.</span><span class="nx">module</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="o">||</span>
       <span class="nx">module</span><span class="p">.</span><span class="nx">module</span><span class="p">.</span><span class="nx">getStatus</span><span class="p">()</span> <span class="o">&lt;</span> <span class="nx">kEvaluated</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
      <span class="o">!</span><span class="nx">ESMLoader</span><span class="p">.</span><span class="nx">cjsCache</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>
    <span class="nx">ESMLoader</span><span class="p">.</span><span class="nx">cjsCache</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">exports</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>这里会根据不同的文件扩展名调用<code>Module._extension</code>方法，分别是<code>.js .json .node</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// lib\internal\modules\cjs\loader.js
</span><span class="c1"></span><span class="nx">Module</span><span class="p">.</span><span class="nx">_extensions</span><span class="p">[</span><span class="s1">&#39;.js&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">module</span><span class="p">,</span> <span class="nx">filename</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">filename</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="s1">&#39;.js&#39;</span><span class="p">))</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">pkg</span> <span class="o">=</span> <span class="nx">readPackageScope</span><span class="p">(</span><span class="nx">filename</span><span class="p">);</span>
    <span class="c1">// Function require shouldn&#39;t be used in ES modules.
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">pkg</span> <span class="o">&amp;&amp;</span> <span class="nx">pkg</span><span class="p">.</span><span class="nx">data</span> <span class="o">&amp;&amp;</span> <span class="nx">pkg</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;module&#39;</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">parent</span> <span class="o">=</span> <span class="nx">moduleParentCache</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">module</span><span class="p">);</span>
      <span class="kr">const</span> <span class="nx">parentPath</span> <span class="o">=</span> <span class="nx">parent</span> <span class="o">&amp;&amp;</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">filename</span><span class="p">;</span>
      <span class="kr">const</span> <span class="nx">packageJsonPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">pkg</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span> <span class="s1">&#39;package.json&#39;</span><span class="p">);</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nx">ERR_REQUIRE_ESM</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">parentPath</span><span class="p">,</span> <span class="nx">packageJsonPath</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="c1">// If already analyzed the source, then it will be cached.
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">cached</span> <span class="o">=</span> <span class="nx">cjsParseCache</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">module</span><span class="p">);</span>
  <span class="kd">let</span> <span class="nx">content</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">cached</span> <span class="o">&amp;&amp;</span> <span class="nx">cached</span><span class="p">.</span><span class="nx">source</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">content</span> <span class="o">=</span> <span class="nx">cached</span><span class="p">.</span><span class="nx">source</span><span class="p">;</span>
    <span class="nx">cached</span><span class="p">.</span><span class="nx">source</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">content</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">module</span><span class="p">.</span><span class="nx">_compile</span><span class="p">(</span><span class="nx">content</span><span class="p">,</span> <span class="nx">filename</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>对于<code>.js</code>模块，会调用<code>fs.readFileSync</code>读取文件内容，有缓存则直接读缓存，然后调用<code>_compile</code>编译。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// lib\internal\modules\cjs\loader.js
</span><span class="c1"></span><span class="nx">Module</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_compile</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">content</span><span class="p">,</span> <span class="nx">filename</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">moduleURL</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">redirects</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">policy</span><span class="o">?</span><span class="p">.</span><span class="nx">manifest</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">moduleURL</span> <span class="o">=</span> <span class="nx">pathToFileURL</span><span class="p">(</span><span class="nx">filename</span><span class="p">);</span>
    <span class="nx">redirects</span> <span class="o">=</span> <span class="nx">policy</span><span class="p">.</span><span class="nx">manifest</span><span class="p">.</span><span class="nx">getDependencyMapper</span><span class="p">(</span><span class="nx">moduleURL</span><span class="p">);</span>
    <span class="nx">policy</span><span class="p">.</span><span class="nx">manifest</span><span class="p">.</span><span class="nx">assertIntegrity</span><span class="p">(</span><span class="nx">moduleURL</span><span class="p">,</span> <span class="nx">content</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">maybeCacheSourceMap</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">content</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
  <span class="kr">const</span> <span class="nx">compiledWrapper</span> <span class="o">=</span> <span class="nx">wrapSafe</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">content</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>

  <span class="kd">let</span> <span class="nx">inspectorWrapper</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">getOptionValue</span><span class="p">(</span><span class="s1">&#39;--inspect-brk&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">process</span><span class="p">.</span><span class="nx">_eval</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">resolvedArgv</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// We enter the repl if we&#39;re not given a filename argument.
</span><span class="c1"></span>      <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
          <span class="nx">resolvedArgv</span> <span class="o">=</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">_resolveFilename</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
          <span class="c1">// We only expect this codepath to be reached in the case of a
</span><span class="c1"></span>          <span class="c1">// preloaded module (it will fail earlier with the main entry)
</span><span class="c1"></span>          <span class="nx">assert</span><span class="p">(</span><span class="nx">ArrayIsArray</span><span class="p">(</span><span class="nx">getOptionValue</span><span class="p">(</span><span class="s1">&#39;--require&#39;</span><span class="p">)));</span>
        <span class="p">}</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">resolvedArgv</span> <span class="o">=</span> <span class="s1">&#39;repl&#39;</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Set breakpoint on module start
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">resolvedArgv</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">hasPausedEntry</span> <span class="o">&amp;&amp;</span> <span class="nx">filename</span> <span class="o">===</span> <span class="nx">resolvedArgv</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">hasPausedEntry</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="nx">inspectorWrapper</span> <span class="o">=</span> <span class="nx">internalBinding</span><span class="p">(</span><span class="s1">&#39;inspector&#39;</span><span class="p">).</span><span class="nx">callAndPauseOnStart</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="kr">const</span> <span class="nx">dirname</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">dirname</span><span class="p">(</span><span class="nx">filename</span><span class="p">);</span>
  <span class="kr">const</span> <span class="nx">require</span> <span class="o">=</span> <span class="nx">makeRequireFunction</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">redirects</span><span class="p">);</span>
  <span class="kd">let</span> <span class="nx">result</span><span class="p">;</span>
  <span class="kr">const</span> <span class="nx">exports</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
  <span class="kr">const</span> <span class="nx">thisValue</span> <span class="o">=</span> <span class="nx">exports</span><span class="p">;</span>
  <span class="kr">const</span> <span class="nx">module</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">requireDepth</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">statCache</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Map</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">inspectorWrapper</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">result</span> <span class="o">=</span> <span class="nx">inspectorWrapper</span><span class="p">(</span><span class="nx">compiledWrapper</span><span class="p">,</span> <span class="nx">thisValue</span><span class="p">,</span> <span class="nx">exports</span><span class="p">,</span>
                              <span class="nx">require</span><span class="p">,</span> <span class="nx">module</span><span class="p">,</span> <span class="nx">filename</span><span class="p">,</span> <span class="nx">dirname</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">result</span> <span class="o">=</span> <span class="nx">compiledWrapper</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">thisValue</span><span class="p">,</span> <span class="nx">exports</span><span class="p">,</span> <span class="nx">require</span><span class="p">,</span> <span class="nx">module</span><span class="p">,</span>
                                  <span class="nx">filename</span><span class="p">,</span> <span class="nx">dirname</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">hasLoadedAnyUserCJSModule</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">requireDepth</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">statCache</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>首先会调用<code>wrapSafe</code>方法给源代码包装，传入<code>6</code>个参数<code>exports, require, mudole, __filename, __dirname</code>形成一个新函数，如果已经包装过，就直接调用<code>vm.runInThisContext</code>运行这个函数，否则就调用内建模块<code>contextify</code>里的<code>compileFunction</code>函数编译，最终返回一个可执行的函数体。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// lib\internal\modules\cjs\loader.js
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">wrap</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">script</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">wrapper</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="nx">script</span> <span class="o">+</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">wrapper</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
<span class="p">};</span>

<span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="p">[</span>
  <span class="s1">&#39;(function (exports, require, module, __filename, __dirname) { &#39;</span><span class="p">,</span>
  <span class="s1">&#39;\n});&#39;</span>
<span class="p">];</span>

<span class="kd">function</span> <span class="nx">wrapSafe</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">content</span><span class="p">,</span> <span class="nx">cjsModuleInstance</span><span class="p">)</span> <span class="p">{</span>
<span class="c1">// ...
</span><span class="c1"></span>  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">compiled</span> <span class="o">=</span> <span class="nx">compileFunction</span><span class="p">(</span>
      <span class="nx">content</span><span class="p">,</span>
      <span class="nx">filename</span><span class="p">,</span>
      <span class="mi">0</span><span class="p">,</span>
      <span class="mi">0</span><span class="p">,</span>
      <span class="kc">undefined</span><span class="p">,</span>
      <span class="kc">false</span><span class="p">,</span>
      <span class="kc">undefined</span><span class="p">,</span>
      <span class="p">[],</span>
      <span class="p">[</span>
        <span class="s1">&#39;exports&#39;</span><span class="p">,</span>
        <span class="s1">&#39;require&#39;</span><span class="p">,</span>
        <span class="s1">&#39;module&#39;</span><span class="p">,</span>
        <span class="s1">&#39;__filename&#39;</span><span class="p">,</span>
        <span class="s1">&#39;__dirname&#39;</span><span class="p">,</span>
      <span class="p">]</span>
    <span class="p">);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">mainModule</span> <span class="o">===</span> <span class="nx">cjsModuleInstance</span><span class="p">)</span>
      <span class="nx">enrichCJSError</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kr">const</span> <span class="p">{</span> <span class="nx">callbackMap</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">internalBinding</span><span class="p">(</span><span class="s1">&#39;module_wrap&#39;</span><span class="p">);</span>
  <span class="nx">callbackMap</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">compiled</span><span class="p">.</span><span class="nx">cacheKey</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">importModuleDynamically</span><span class="o">:</span> <span class="nx">async</span> <span class="p">(</span><span class="nx">specifier</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">loader</span> <span class="o">=</span> <span class="nx">asyncESM</span><span class="p">.</span><span class="nx">ESMLoader</span><span class="p">;</span>
      <span class="k">return</span> <span class="nx">loader</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="nx">specifier</span><span class="p">,</span> <span class="nx">normalizeReferrerURL</span><span class="p">(</span><span class="nx">filename</span><span class="p">));</span>
    <span class="p">}</span>
  <span class="p">});</span>

  <span class="k">return</span> <span class="nx">compiled</span><span class="p">.</span><span class="kd">function</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>回到刚才的<code>_compile</code>，在包装编译完成之后，会将本体的<code>exports, require, module, filename, dirname</code>作为参数传入刚才编译后的函数，最终返回执行的结果。</p>
<p>这里看一下<code>require</code>方法的具体实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// // lib\internal\modules\cjs\loader.js
</span><span class="c1"></span><span class="nx">Module</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">require</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">validateString</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">id</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nx">ERR_INVALID_ARG_VALUE</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span>
                                    <span class="s1">&#39;must be a non-empty string&#39;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">requireDepth</span><span class="o">++</span><span class="p">;</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">_load</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="cm">/* isMain */</span> <span class="kc">false</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
    <span class="nx">requireDepth</span><span class="o">--</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>至此， 环境初始化完成，内建模块，<code>native</code>模块以及自定义模块加载完成，主文件编译完毕，在刚刚初始化的<code>Environment</code>上，启动<code>event loop</code>，以及<code>libuv</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="k">do</span> <span class="p">{</span>
  <span class="n">uv_run</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">event_loop</span><span class="p">(),</span> <span class="n">UV_RUN_DEFAULT</span><span class="p">);</span>
  <span class="n">per_process</span><span class="o">::</span><span class="n">v8_platform</span><span class="p">.</span><span class="n">DrainVMTasks</span><span class="p">(</span><span class="n">isolate_</span><span class="p">);</span>
  <span class="n">more</span> <span class="o">=</span> <span class="n">uv_loop_alive</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">event_loop</span><span class="p">());</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">more</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">is_stopping</span><span class="p">())</span> <span class="k">continue</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">uv_loop_alive</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">event_loop</span><span class="p">()))</span> <span class="p">{</span>
    <span class="n">EmitBeforeExit</span><span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="n">get</span><span class="p">());</span>
  <span class="p">}</span>
  <span class="n">more</span> <span class="o">=</span> <span class="n">uv_loop_alive</span><span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">event_loop</span><span class="p">());</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">more</span> <span class="o">==</span> <span class="nb">true</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">is_stopping</span><span class="p">());</span>
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://1aomn.com/tags/node.js/" term="Node.js" label="Node.js" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Javascript原型链</title>
            <link rel="alternate" type="text/html" href="https://1aomn.com/skills/%E5%8E%9F%E5%9E%8B%E9%93%BE/" />
            <id>https://1aomn.com/skills/%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
            <updated>2020-09-25T16:37:54+08:00</updated>
            <published>2020-09-18T00:05:05+08:00</published>
            <author>
                    <name>秋屿</name>
                    <uri>https://1aomn.com</uri>
                    <email>burningdian@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[每个对象都有__proto__属性标识自己继承的原型。 函数被创建时，JS会为这个函数……]]></summary>
            
                <content type="html"><![CDATA[<p>每个对象都有<code>__proto__</code>属性标识自己继承的原型。</p>
<p>函数被创建时，<code>JS</code>会为这个函数添加<code>prototype</code>属性，即该函数可以被当作构造函数使用，值是是一个对象，该对象有一个名为<code>constructor</code>的成员函数，值为该函数本身。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="sb">`Jack`</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="p">)</span> <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>通过<code>new</code>调用函数(当作构造函数)来构造对象时，会创建该函数的实例化对象，新对象的<code>__proto__</code>指向原函数的<code>prototype</code>属性来实现继承。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span> <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>函数也是一个对象，函数对象由<code>Function</code>构造，其<code>__proto__</code>指向<code>Function.prototype</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">Person</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>通过<code>new Object()</code>和<code>{}</code>创建的对象，<code>__proto__</code>属性都指向<code>Object.prototype</code>，因为<code>Object</code>就是他们的构造函数，这与上面的行为是相一致的。</p>
<p>上面提到的，既然<code>Person.prototype</code>的值是一个对象，那么该对象也是有原型的，我们发现它指向<code>Object.prototype</code>，至此达到了该原型链的顶端。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__proto__</span> <span class="c1">// null
</span></code></pre></td></tr></table>
</div>
</div><p>但深究下去会发现，既然<code>Object</code>本身是构造函数，其<code>__proto__</code>指向<code>Function.prototype</code>，<code>Function.prototype</code>也是对象，继承了<code>Object.prototype</code>，这就产生了&quot;你中有我，我中有你&quot;的奇怪问题。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nb">Object</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true
</span><span class="c1"></span><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true
</span><span class="c1"></span><span class="nb">Function</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>在<code>ECMA</code>规范<a href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4">15.3.4</a>中：</p>
<blockquote>
<p>object (its [[Class]] is <code>&quot;Function&quot;</code>) that, when invoked, accepts any arguments and returns <strong>undefined</strong>.</p>
<p>The value of the [[Prototype]] internal property of the Function prototype object is the standard built-in Object prototype object (<a href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4">15.2.4</a>). The initial value of the [[Extensible]] internal property of the Function prototype object is <strong>true</strong>.</p>
<p>The Function prototype object does not have a <code>valueOf</code> property of its own; however, it inherits the <code>valueOf</code> property from the Object prototype Object.</p>
<p>The <code>length</code> property of the Function prototype object is <strong>0</strong>.</p>
</blockquote>
<p>所以说普通函数都是<code>Function</code>的实例，他们的<code>__proto__</code>都指向<code>Function.prototype</code>。</p>
<p>而根据规范，<code>Function.prototype</code>本身是一个函数对象，它继承自<code>Object.prototype</code>。</p>
<p>在<code>ECMA</code>规范<a href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4">15.2.4</a>中：</p>
<blockquote>
<p>The value of the [[Prototype]] internal property of the Object prototype object is <strong>null</strong>, the value of the [[Class]] internal property is <code>&quot;Object&quot;</code>, and the initial value of the [[Extensible]] internal property is <strong>true</strong>.</p>
</blockquote>
<p>总结如下：</p>
<p><code>Object.prototype</code>是最顶级的原型，它的<code>__proto__</code>为<code>null</code>。</p>
<p><code>Function.prototype</code>继承自<code>Object.prototype</code>。</p>
<p>所有的函数对象继承自<code>Function.prototype</code>。</p>
<p>所有由<code>{}</code>，<code>new Object()</code>产生的对象继承自<code>Object</code>。</p>
<p>由函数对象产生的对象，原型指向其构造函数的<code>prototype</code>属性。</p>
<p>经典老图</p>
<p><img src="https://i.loli.net/2020/09/25/aSvQ6XxiDusJzd7.jpg" alt="jsobj_full.jpg"></p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">StreamerHelper</title>
            <link rel="alternate" type="text/html" href="https://1aomn.com/skills/streamerhelper/" />
            <id>https://1aomn.com/skills/streamerhelper/</id>
            <updated>2020-09-28T17:59:42+08:00</updated>
            <published>2020-09-18T00:05:05+08:00</published>
            <author>
                    <name>秋屿</name>
                    <uri>https://1aomn.com</uri>
                    <email>burningdian@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[Introduction StreamerHelper是一个开源项目，可以实现虎牙、斗鱼、AfreecaTV……]]></summary>
            
                <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/657a163e660f32aae67fce0af8cbdef47251f106/68747470733a2f2f73312e617831782e636f6d2f323032302f30372f32322f55624b4370712e706e67" style="zoom:20%;" /></p>
<h2 id="introduction">Introduction</h2>
<p><code>StreamerHelper</code>是一个开源项目，可以实现虎牙、斗鱼、AfreecaTV等主流直播平台主播开播时自动录像，并适时上传。Github地址：<a href="https://github.com/ZhangMingZhao1/StreamerHelper">https://github.com/ZhangMingZhao1/StreamerHelper</a>。</p>
<p><code>StreamerHelper</code>使用<code>Node.js</code>开发，同时集成了直播录制和视频上传的功能，软件部署后，后台实时批量监测各个平台主播是否在线，并使用<code>FFmpeg</code>录制直播保存为视频文件，停播后投稿到b站。</p>
<h2 id="project-tree">Project Tree</h2>
<pre><code>StreamerHelper
├─ src
│  ├─ app.ts
│  ├─ engine
│  │  ├─ getStreamUrl.ts
│  │  ├─ liveStreamStatus.ts
│  │  ├─ message.ts
│  │  ├─ RoomStatus.ts
│  │  └─ website
│  │     ├─ afreecatv.ts
│  │     ├─ bilibili.ts
│  │     ├─ cc.ts
│  │     ├─ ...
│  ├─ type
│  │  ├─ StreamInfo.ts
│  │  └─ VideoPart.ts
│  ├─ uploader
│  │  ├─ caller.ts
│  │  ├─ example.js
│  │  ├─ index.js
│  │  └─ uploadStatus.ts
│  └─ util
│     ├─ crypt.js
│     └─ utils.ts
└─ templates
   └─ info.json
</code></pre><p><code>./src/</code>目录下存放项目源码，<code>src/app.ts</code>为程序入口文件，并且管理下载和上传的业务。</p>
<p><code>./src/engine/</code>目录下为直播流获取及下载模块。</p>
<p><code>./src/engine/website/</code>目录下为获取直播流的模块，以插件的方式集成，统一使用<code>axios</code>作为请求库，方便扩展。</p>
<p><code>./src/uploader/</code>目录下为文件上传/投稿模块，部分代码使用<code>js</code>编写，方便直接调用上传。</p>
<p><code>./src/type/</code>目录下定义了一系列接口。</p>
<p><code>./src/util/</code>目录下封装了一些工具方法，如加盐、解析<code>info.json</code>等。</p>
<p><code>./templates/info.json</code>保存用于投稿的信息，所需录制主播信息。</p>
<p>日志文件会自动创建，在<code>./logs/</code>下。</p>
<h2 id="how-does-it-work">How does it work?</h2>
<p>程序启动之后，首先<code>app.ts</code>里有一个大的定时器<code>const timer = setInterval(F, 12000);</code>，每<code>12s</code>遍历一遍<code>info.json</code>里的主播信息，并调用<code>getStreamUrl()</code>检测主播是否在线，如果检测到在线，会实例化<code>Recorder</code>来启动下载线程，同时，会有一个监听器监听直播流断开事件。</p>
<p><code>Recorder</code>类的代码在<code>message.ts</code>里，实例化后，会调用子进程启动<code>FFmpeg</code>来以原码率、原音视频编码的格式下载传入的直播流（占用极小，实际测试中占用不到CPU的<code>2%</code>）。直播流断开后，触发<code>streamDiscon</code>事件，事件触发后，程序会根据直播流是否为正常断开，来选择上传或继续下载。</p>
<p>程序以异步的方式下载多个直播流，并且由统一的事件触发器处理直播流断开的情况。当用户向进程发送<code>SIGINT</code>信号后，程序会移除监听<code>streamDiscn</code>事件，并等待<code>FFmpeg</code>子进程结束后退出。</p>
<p>下载的录播文件会暂时存放于<code>./download/</code>下，并在上传成功后自动删除。</p>
<h2 id="troubles--solutions">Troubles &amp; Solutions</h2>
<p>在获取直播源后的地址可以用<code>PotPlayer</code>播放器正常播放，但无法使用<code>FFmpeg</code>下载，并且返回了<code>403 Forbidden</code>错误，多次测试后发现，<code>PotPlayer</code>在播放直播流时默认携带了一系列<code>Headers</code>信息，之后在<code>FFmpeg</code>启动参数中加入<code>Headers</code>信息，可以成功下载。</p>
<p>项目经历过一次比较大的结构调整，主要是将下载器包装成一个<code>Recorder</code>类，可以通过实例化来异步地单独下载每一个直播流，并统一由<code>app.ts</code>管理，这么做的好处是解开下载模块与上传模块的耦合，降低复杂度。</p>
<p>当需要强制使一个<code>FFmpeg</code>子进程退出时，可以通过向子进程的<code>stdin</code>的可写流写入<code>q</code>来通知<code>FFmpeg</code>主动退出。</p>
<p>上传模块中，为了避免频繁登录触发验证码，使用了长期有效的<code>access_token</code>来避免验证。</p>
<h2 id="未来计划">未来计划</h2>
<ul>
<li><input disabled="" type="checkbox">支持<code>Twitch</code>。</li>
<li><input disabled="" type="checkbox">支持<code>docker</code>部署。</li>
<li><input disabled="" type="checkbox">爬虫定时区间，节省服务器流量</li>
<li><input disabled="" type="checkbox">重启后同时检测本地是否有上传失败的视频文件，并上传。</li>
</ul>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Cookie，Session和token</title>
            <link rel="alternate" type="text/html" href="https://1aomn.com/skills/cookie-session-token/" />
            <id>https://1aomn.com/skills/cookie-session-token/</id>
            <updated>2020-03-24T23:30:00+08:00</updated>
            <published>2020-03-15T17:42:40+08:00</published>
            <author>
                    <name>秋屿</name>
                    <uri>https://1aomn.com</uri>
                    <email>burningdian@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[Cookie 定义 Cookie，中文名「小甜饼」，是一段用来标识用户身份和附加信息而存储在本地客……]]></summary>
            
                <content type="html"><![CDATA[<h2 id="cookie">Cookie</h2>
<h3 id="定义">定义</h3>
<p>Cookie，中文名「小甜饼」，是一段用来标识用户身份和附加信息而存储在本地客户端上的字符串。</p>
<h3 id="特点">特点</h3>
<p>Cookie有以下几个特点</p>
<ul>
<li>大小有限制，一般不超过5kb</li>
<li>cookie 是没有结构的，但可以用格式如 &quot;a1=v1;a2=v2;a3=v3&quot;来存储结构化数据</li>
<li>跨域不共享，即浏览器为每个域名存储一个 cookie，</li>
<li>浏览器每次发送 http 请求，都会将请求域的 cookie 发送给服务端。这里的请求域仅指本次请求的域，比如在本站首页向 网易云音乐 发送 http 请求，则会向 网易云云音乐 发送本地存储的 cookie 。</li>
<li>服务端可以修改 cookie 并返回给浏览器。</li>
<li>浏览器可以在限制条件下修改 cookie 并返回给服务端。</li>
<li>cookie 在指定的域名及根域名下都生效。</li>
</ul>
<h3 id="缺陷">缺陷</h3>
<p>cookie 通常有以下几个缺陷</p>
<ol>
<li>cookie 在 http 请求中是明文传递的，有信息泄露的风险</li>
<li>cookie 的大小有限制(4kb)，不易存储复杂信息</li>
</ol>
<hr>
<h2 id="session">Session</h2>
<p>session 的本意是会话状态，在 http 中的实现是用来跟踪用户的状态。</p>
<p>由于HTTP协议是无状态的，服务端不知道用户上一次做了什么，所以服务端会在用户初始状态的时候创建特定的 session ，用来标识并跟踪这个用户。</p>
<p>就比如购物网站的购物车，我添加了商品，服务端也做了相应的处理，但服务端不知道这个商品添加到哪，也不知道这个购物车是谁了，有了session，客户端就可以通过它来追踪我，然后服务端也就知道这一系列行为是我做的。</p>
<h3 id="原理">原理</h3>
<ol>
<li>服务端在 cookie 中找到对应的seesionid。</li>
<li>根据 sessionid，从服务端对应的 session 中获取数据，然后返回。</li>
<li>如果找不到 sessionid，服务端创建一个新 session，并将 sessionid 添加到 cookie 中，写入响应头。</li>
</ol>
<h3 id="缺点">缺点</h3>
<ol>
<li>session 存在服务端中，扩展性差。</li>
<li>session 存的东西太多，就会占用过多的内存，无形中增添服务器压力。</li>
<li>依赖于浏览器的 cookie ，有跨域问题</li>
<li>受CSRF攻击的风险。</li>
</ol>
<hr>
<h2 id="token">Token</h2>
<h3 id="原理-1">原理</h3>
<ol>
<li>客户端登录，服务端验证用户名和密码之后，对用户名编码，生成 token 返回给客户端。</li>
<li>客户端将 token 储存，并在每次发送请求的时候附上 token。</li>
<li>客户端后续发送请求，服务端对用户名用同样的方式编码，然后和客户端发过来的 token 做对比，以验证用户合法性。</li>
</ol>
<h3 id="特点-1">特点</h3>
<ol>
<li>Token 不依赖于 Cookie ，可以在不支持 Cookie 的平台上使用，也不会有CSFR攻击的风险</li>
<li>Token 在服务端生成和验证</li>
<li>Token 储存在客户端，比如存在 Cookie ， sessionStorage ， localStorage 中。</li>
</ol>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">谈谈对ACM新生集训队的选拔</title>
            <link rel="alternate" type="text/html" href="https://1aomn.com/skills/talk-about-acm-team/" />
            <id>https://1aomn.com/skills/talk-about-acm-team/</id>
            <updated>2020-09-28T17:55:31+08:00</updated>
            <published>2020-03-10T21:58:44+08:00</published>
            <author>
                    <name>秋屿</name>
                    <uri>https://1aomn.com</uri>
                    <email>burningdian@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html"><![CDATA[]]></summary>
            
                <content type="html"><![CDATA[]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://1aomn.com/tags/%E6%9D%82%E8%B0%88/" term="杂谈" label="杂谈" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">将Hugo博客搭建在服务器上，使用webhook实时构建</title>
            <link rel="alternate" type="text/html" href="https://1aomn.com/skills/builg-a-blog-on-server/" />
            <id>https://1aomn.com/skills/builg-a-blog-on-server/</id>
            <updated>2020-03-10T21:56:13+08:00</updated>
            <published>2020-03-10T21:55:09+08:00</published>
            <author>
                    <name>秋屿</name>
                    <uri>https://1aomn.com</uri>
                    <email>burningdian@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html"><![CDATA[]]></summary>
            
                <content type="html"><![CDATA[]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">搭建Hugo博客，通过Netlify自动部署</title>
            <link rel="alternate" type="text/html" href="https://1aomn.com/skills/build-a-blog/" />
            <id>https://1aomn.com/skills/build-a-blog/</id>
            <updated>2020-03-22T00:43:22+08:00</updated>
            <published>2020-03-06T22:02:46+08:00</published>
            <author>
                    <name>秋屿</name>
                    <uri>https://1aomn.com</uri>
                    <email>burningdian@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[本文章基于Windows10，Hugo_extended_0.66.0，博客发布的流……]]></summary>
            
                <content type="html"><![CDATA[<blockquote>
<p>本文章基于Windows10，Hugo_extended_0.66.0，博客发布的流程是本地上传到github，触发hook后，netlify自动发布</p>
</blockquote>
<h2 id="一下载并安装hugo">一、下载并安装Hugo</h2>
<ul>
<li>
<p><a href="https://github.com/gohugoio/hugo/releases">Hugo下载地址</a></p>
<p>本教程选择了<img src="https://i.loli.net/2020/03/07/zT8oSZCOAib1q4J.png" alt="1583507935042.png">安装，该版本增加了对sass的支持 。</p>
<h4 id="第1步安装hugo">第1步：安装Hugo</h4>
<p>下载解压，完成之后，把hugo.exe添加到全局变量<code>Path</code>。<img src="https://i.loli.net/2020/03/07/LPQvA3RNwEGMJhm.png" alt="1583508112162.png">在控制台中验证安装成功。</p>
</li>
<li>
<p>在Github上新建仓库hugo-on-netlify，并在D:\Blog目录下打开Gitbash，输入指令。</p>
<blockquote>
<p>$ git clone  <a href="https://github.com/xxxxx/hugo-on-netlify">https://github.com/xxxxx/hugo-on-netlify</a></p>
<p>$ hugo new site hugo-on-netlify --force</p>
</blockquote>
<p>此时便会在hugo-on-netlify文件夹里生成网站需要的文件，文件结构如下。</p>
<blockquote>
<pre><code>myblog
├── archetypes
│   └── default.md
├── content
├── data
├── layouts
├── static
├── themes
└── config.toml
</code></pre></blockquote>
</li>
</ul>
<h4 id="第2步安装主题meme">第2步：安装主题Meme</h4>
<p>Hugo是没有默认主题的，这里选用主题<a href="https://github.com/reuixiy/hugo-theme-meme">Meme</a>。</p>
<blockquote>
<p>$ git clone  <a href="https://github.com/reuixiy/hugo-theme-meme.git">https://github.com/reuixiy/hugo-theme-meme.git</a> themes/meme</p>
</blockquote>
<p>然后替换 <code>config.toml</code> 为 <a href="https://github.com/reuixiy/hugo-theme-meme/blob/master/config-examples/zh-cn/config.toml">config.toml</a> ，可以在其中进行个性化设置。</p>
<h4 id="第3步测试">第3步：测试</h4>
<p>创建测试页面</p>
<blockquote>
<p>$ hugo new posts/my-first-post.md</p>
<p>$ hugo new about/_index.md</p>
</blockquote>
<p>此时，基本工作已经完成了，使用</p>
<blockquote>
<p>$ hugo server -D</p>
</blockquote>
<p>在浏览器里访问<code>http://localhost:1313/</code>，预览博客效果。</p>
<h2 id="二上传github">二、上传Github</h2>
<p>之前我们已经新建了hugo-on-netlify仓库，下一步把博客上传</p>
<blockquote>
<p>$ git add .  #将所有文件添加到仓库里</p>
<p>$ git commit -m &quot;commit message&quot;</p>
<p>$ git push -u origin master</p>
</blockquote>
<p>以上也是更新文章所需的操作，如果嫌麻烦，可以写一个bat脚本减轻工作量。</p>
<h2 id="三使用netlify发布网站">三、使用Netlify发布网站</h2>
<p>官网<a href="https://www.netlify.com/">Netlify</a>可以直接通过Github登录，非常方便。</p>
<h4 id="第1步配置文件">第1步：配置文件</h4>
<p>首先在网站根目录下添加<code>netlify.toml</code>文件，如官网所示：</p>
<blockquote>
<p>[build]
publish = &quot;public&quot;
command = &quot;hugo --gc --minify&quot;</p>
<p>[context.production.environment]
HUGO_VERSION = &quot;0.66.0&quot;
HUGO_ENV = &quot;production&quot;
HUGO_ENABLEGITINFO = &quot;true&quot;</p>
<p>[context.split1]
command = &quot;hugo --gc --minify --enableGitInfo&quot;</p>
<p>[context.split1.environment]
HUGO_VERSION = &quot;0.66.0&quot;
HUGO_ENV = &quot;production&quot;</p>
<p>[context.deploy-preview]
command = &quot;hugo --gc --minify --buildFuture -b $DEPLOY_PRIME_URL&quot;</p>
<p>[context.deploy-preview.environment]
HUGO_VERSION = &quot;0.66.0&quot;</p>
<p>[context.branch-deploy]
command = &quot;hugo --gc --minify -b $DEPLOY_PRIME_URL&quot;</p>
<p>[context.branch-deploy.environment]
HUGO_VERSION = &quot;0.66.0&quot;</p>
<p>[context.next.environment]
HUGO_ENABLEGITINFO = &quot;true&quot;</p>
</blockquote>
<h4 id="第2步netlify配置">第2步：Netlify配置</h4>
<p>根据官网的指引，连接Github中的blog-on-netlify仓库，然后修改设置。</p>
<p>首先修改<code>Build settings</code>，因为需要Netlify通过hugo构建，故做如下修改</p>
<p><img src="https://i.loli.net/2020/03/07/Cms9vcMBQaoZxfO.png" alt="1583510667070.png"></p>
<p>然后修改</p>
<p><img src="https://i.loli.net/2020/03/07/nEK6tA4o2NzQyGq.png" alt="1583510849748.png"></p>
<p>这里的修改是因为Netlify默认使用的Hugo版本过低，需要手动设置，否则不支持Meme主题。</p>
<h4 id="第3步完成">第3步：完成</h4>
<p>构建完成后，Netlify会自动生成一个二级域名，指向你的博客，至此Hugo博客的搭建就完成了。</p>
<h2 id="四自定义域名">四、自定义域名</h2>
<p>因为之前在腾讯云上搭建过博客，也是在上面注册的.com域名，所以这里以腾讯云的DNS解析操作为例。</p>
<p>操作很简单，首先在Domian management中添加域名<img src="https://i.loli.net/2020/03/07/QN67BfgvWCZuHFE.png" alt="1583511456178.png">然后在腾讯云域名的解析记录里添加两条记录。</p>
<p><img src="https://i.loli.net/2020/03/09/xan3kQCeifIWtvy.png" alt="image.png"></p>
<p>等待10分钟后，就可以通过域名访问自己的网站了。</p>
<p>Netlify推荐使用 SSL/TLS 的域名，白嫖的方法很多，这里就不赘述了。</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text"></title>
            <link rel="alternate" type="text/html" href="https://1aomn.com/skills/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8-%E8%83%A1%E4%B8%96%E6%9D%B0-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/" />
            <id>https://1aomn.com/skills/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8-%E8%83%A1%E4%B8%96%E6%9D%B0-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
            <updated>2021-01-28T01:21:41+08:00</updated>
            <published>0001-01-01T00:00:00+00:00</published>
            <author>
                    <name>秋屿</name>
                    <uri>https://1aomn.com</uri>
                    <email>burningdian@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[存储方式——文件存储，块存储，对象存储 对象存储优势：1.便于横向扩展 2.低代价的数据……]]></summary>
            
                <content type="html"><![CDATA[<p>存储方式——文件存储，块存储，对象存储</p>
<p>对象存储优势：1.便于横向扩展 2.低代价的数据冗余</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
</feed>
